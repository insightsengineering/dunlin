<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="assertions" timestamp="2023-05-18T12:59:55Z" hostname="5f27be1a9a29" tests="14" skipped="0" failures="0" errors="0" time="0.12">
    <testcase time="0.018" classname="assertions" name="assert_valid_format_works_as_expected"/>
    <testcase time="0.032" classname="assertions" name="assert_valid_format_works_as_expected"/>
    <testcase time="0.036" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00099999999999989" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00100000000000011" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00099999999999989" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00700000000000012" classname="assertions" name="assert_valid_list_format_works_as_expected"/>
    <testcase time="0.004" classname="assertions" name="assert_valid_list_format_works_as_expected"/>
    <testcase time="0.012" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.00099999999999989" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.00100000000000011" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
  </testsuite>
  <testsuite name="co_relevels" timestamp="2023-05-18T12:59:56Z" hostname="5f27be1a9a29" tests="22" skipped="0" failures="0" errors="0" time="0.155">
    <testcase time="0.026" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.0119999999999998" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.0069999999999999" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00900000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00700000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.0110000000000001" classname="co_relevels" name="co_relevels_retuns_an_error_when_the_matching_between_the_selected_column_is_not_unique."/>
    <testcase time="0.0149999999999999" classname="co_relevels" name="co_relevels_retuns_an_error_when_NAs_are_present."/>
  </testsuite>
  <testsuite name="cut_by_group" timestamp="2023-05-18T12:59:56Z" hostname="5f27be1a9a29" tests="14" skipped="0" failures="0" errors="0" time="0.093">
    <testcase time="0.026" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.002" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.00499999999999989" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.00700000000000012" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.002" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.00499999999999989" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.0110000000000001" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.002" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.00499999999999989" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.00500000000000012" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.0109999999999999" classname="cut_by_group" name="cut_by_group_fails_when_the_number_of_labels_doesn_t_fit_the_number_of_breaks."/>
  </testsuite>
  <testsuite name="dm_unite" timestamp="2023-05-18T12:59:56Z" hostname="5f27be1a9a29" tests="15" skipped="0" failures="0" errors="0" time="0.836">
    <testcase time="0.312" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.002" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.233" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.00199999999999978" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.004" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.224" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.00099999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.00500000000000034" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.012" classname="dm_unite" name="ls_unite_works_as_expected_with_factors"/>
    <testcase time="0.00999999999999979" classname="dm_unite" name="ls_unite_works_as_expected_with_factors"/>
    <testcase time="0.012" classname="dm_unite" name="ls_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.004" classname="dm_unite" name="ls_unite_works_as_expected_with_more_than_2_columns"/>
  </testsuite>
  <testsuite name="explicit_na" timestamp="2023-05-18T12:59:57Z" hostname="5f27be1a9a29" tests="49" skipped="0" failures="0" errors="0" time="0.741">
    <testcase time="0.184" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00600000000000023" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.227" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00600000000000023" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.148" classname="explicit_na" name="dm_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.048" classname="explicit_na" name="dm_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.0209999999999999" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.0130000000000003" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00599999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00500000000000034" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00800000000000001" classname="explicit_na" name="ls_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.004" classname="explicit_na" name="ls_explicit_na_skip_if_all_datasets_excluded"/>
  </testsuite>
  <testsuite name="filter" timestamp="2023-05-18T12:59:57Z" hostname="5f27be1a9a29" tests="51" skipped="0" failures="0" errors="0" time="0.262">
    <testcase time="0.012" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.012" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.00199999999999978" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.00700000000000012" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.00200000000000022" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.00699999999999967" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.0100000000000002" classname="filter" name="log_filter_fails_if_variable_outside_data_environment"/>
    <testcase time="0.00199999999999978" classname="filter" name="log_filter_fails_if_variable_outside_data_environment"/>
    <testcase time="0.00700000000000012" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00600000000000023" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00499999999999989" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00199999999999978" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00700000000000012" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00300000000000011" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00499999999999989" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00800000000000001" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00499999999999989" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00500000000000034" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00499999999999989" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00700000000000012" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00199999999999978" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.004" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00199999999999978" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00500000000000034" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00700000000000012" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00299999999999967" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00500000000000034" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.0089999999999999" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00300000000000011" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00299999999999967" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.004" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00500000000000034" classname="filter" name="get_log_works_as_expected_with_suffix"/>
    <testcase time="0.00699999999999967" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.00999999999999979" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00500000000000034" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00299999999999967" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00500000000000034" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00499999999999989" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00300000000000011" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00599999999999978" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
  </testsuite>
  <testsuite name="join_adsub_adsl" timestamp="2023-05-18T12:59:58Z" hostname="5f27be1a9a29" tests="33" skipped="0" failures="0" errors="0" time="2.355">
    <testcase time="0.455" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.33" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.324" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.324" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.405" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.398000000000001" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.016" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00499999999999989" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00499999999999989" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.016" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0119999999999996" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0119999999999996" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0260000000000007" classname="join_adsub_adsl" name="join_adsub_adsl.list_throw_a_warning_when_column_already_exist_in_adsl."/>
  </testsuite>
  <testsuite name="pivot" timestamp="2023-05-18T13:00:00Z" hostname="5f27be1a9a29" tests="17" skipped="0" failures="0" errors="0" time="0.124">
    <testcase time="0.0129999999999999" classname="pivot" name="mini_pivot_wider_works_as_expected."/>
    <testcase time="0.00399999999999956" classname="pivot" name="mini_pivot_wider_works_as_expected."/>
    <testcase time="0.00999999999999979" classname="pivot" name="mini_pivot_wider_returns_an_error_when_required_column_are_not_present."/>
    <testcase time="0.0100000000000007" classname="pivot" name="mini_pivot_wider_returns_an_error_when_data_are_duplicated."/>
    <testcase time="0.00800000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected."/>
    <testcase time="0.00399999999999956" classname="pivot" name="multi_pivot_wider_works_as_expected."/>
    <testcase time="0.00800000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00499999999999989" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00800000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00400000000000045" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.0110000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.00399999999999956" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.00400000000000045" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.0109999999999992" classname="pivot" name="poly_pivot_wider_works_as_expected."/>
    <testcase time="0.00500000000000078" classname="pivot" name="poly_pivot_wider_works_as_expected."/>
    <testcase time="0.00999999999999979" classname="pivot" name="poly_pivot_wider_works_as_expected_with_default_label."/>
    <testcase time="0.00499999999999989" classname="pivot" name="poly_pivot_wider_works_as_expected_with_default_label."/>
  </testsuite>
  <testsuite name="propagate" timestamp="2023-05-18T13:00:00Z" hostname="5f27be1a9a29" tests="9" skipped="4" failures="0" errors="0" time="0.511">
    <testcase time="0.0810000000000004" classname="propagate" name="propagate.list_works_as_expected">
      <skipped message="Reason: On CRAN ('test-propagate.R:16:3')"/>
    </testcase>
    <testcase time="0.0379999999999994" classname="propagate" name="propagate.list_works_as_expected_in_safe_mode"/>
    <testcase time="0.00999999999999979" classname="propagate" name="propagate.list_works_as_expected_in_safe_mode">
      <skipped message="Reason: On CRAN ('test-propagate.R:35:3')"/>
    </testcase>
    <testcase time="0.182" classname="propagate" name="propagate.dm_works_as_expected"/>
    <testcase time="0.016" classname="propagate" name="propagate.dm_works_as_expected">
      <skipped message="Reason: On CRAN ('test-propagate.R:56:3')"/>
    </testcase>
    <testcase time="0.144" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.000999999999999446" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.024" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.0150000000000006" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode">
      <skipped message="Reason: On CRAN ('test-propagate.R:75:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="reformat" timestamp="2023-05-18T13:00:01Z" hostname="5f27be1a9a29" tests="31" skipped="0" failures="9" errors="0" time="0.874">
    <testcase time="0.024" classname="reformat" name="reformat_fails_for_numeric_or_logical"/>
    <testcase time="0.157999999999999" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_FALSE">
      <failure type="failure" message="reformat(x, r, string_as_fct = FALSE) (`actual`) not identical to c(&quot;b&quot;, &quot;x&quot;, &quot;b&quot;, &quot;y&quot;, &quot;z&quot;, &quot;x&quot;) (`expected`). ('test-reformat.R:16:3')">reformat(x, r, string_as_fct = FALSE) (`actual`) not identical to c("b", "x", "b", "y", "z", "x") (`expected`).

`actual`:   "b" "x" "b" "z" "z" "x"
`expected`: "b" "x" "b" "y" "z" "x"</failure>
    </testcase>
    <testcase time="0.04" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE">
      <failure type="failure" message="reformat(x, r, string_as_fct = TRUE) (`actual`) not identical to factor(...) (`expected`). ('test-reformat.R:25:3')">reformat(x, r, string_as_fct = TRUE) (`actual`) not identical to factor(...) (`expected`).

`actual`:   "b" "x" "b" "z" "z" "x"
`expected`: "b" "x" "b" "y" "z" "x"</failure>
    </testcase>
    <testcase time="0.0469999999999997" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE_and_na_last_is_false">
      <failure type="failure" message="reformat(x, r, string_as_fct = TRUE, na_last = FALSE) (`actual`) not identical to factor(...) (`expected`). ('test-reformat.R:34:3')">reformat(x, r, string_as_fct = TRUE, na_last = FALSE) (`actual`) not identical to factor(...) (`expected`).

`actual`:   "b" "x" "b" "z" "z" "x"
`expected`: "b" "x" "b" "y" "z" "x"</failure>
    </testcase>
    <testcase time="0.016" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE_and_na_last_is_false"/>
    <testcase time="0.0270000000000001" classname="reformat" name="reformat_for_factors_works_as_expected">
      <failure type="failure" message="reformat(x, r) (`actual`) not identical to factor(c(&quot;x&quot;, &quot;y&quot;, &quot;b&quot;, &quot;x&quot;, &quot;z&quot;), c(&quot;x&quot;, &quot;y&quot;, &quot;b&quot;, &quot;z&quot;)) (`expected`). ('test-reformat.R:52:3')">reformat(x, r) (`actual`) not identical to factor(c("x", "y", "b", "x", "z"), c("x", "y", "b", "z")) (`expected`).

`actual`:   "x" "z" "b" "x" "z"
`expected`: "x" "y" "b" "x" "z"</failure>
    </testcase>
    <testcase time="0.0330000000000004" classname="reformat" name="reformat_for_factors_works_as_expected">
      <failure type="failure" message="reformat(x, r) (`actual`) not identical to factor(c(&quot;x&quot;, &quot;y&quot;, &quot;b&quot;, &quot;x&quot;, NA), c(&quot;x&quot;, &quot;y&quot;, &quot;b&quot;)) (`expected`). ('test-reformat.R:57:3')">reformat(x, r) (`actual`) not identical to factor(c("x", "y", "b", "x", NA), c("x", "y", "b")) (`expected`).

`actual`:   "x " "NA" "b " "x " "NA"
`expected`: "x " "y " "b " "x " "NA"</failure>
    </testcase>
    <testcase time="0.0149999999999997" classname="reformat" name="reformat_for_factors_works_as_expected"/>
    <testcase time="0.00699999999999967" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist"/>
    <testcase time="0.0280000000000005" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist">
      <failure type="failure" message="`res` (`actual`) not identical to factor(...) (`expected`). ('test-reformat.R:72:3')">`res` (`actual`) not identical to factor(...) (`expected`).

`actual`:   "x" "x" "b" "z" "z"
`expected`: "x" "x" "b" "y" "z"</failure>
    </testcase>
    <testcase time="0.016" classname="reformat" name="reformat_factor_works_as_expected_when_na_last_FALSE"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_factor_works_as_expected_when_na_last_FALSE"/>
    <testcase time="0.00699999999999967" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist_and_na_last_is_false."/>
    <testcase time="0.024" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist_and_na_last_is_false.">
      <failure type="failure" message="`res` (`actual`) not identical to factor(...) (`expected`). ('test-reformat.R:92:3')">`res` (`actual`) not identical to factor(...) (`expected`).

`actual`:   "x" "x" "b" "z" "z"
`expected`: "x" "x" "b" "y" "z"</failure>
    </testcase>
    <testcase time="0.0190000000000001" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.0230000000000006" classname="reformat" name="reformat_for_list_works_as_expected">
      <failure type="failure" message="res$df1$char (`actual`) not identical to `expected` (`expected`). ('test-reformat.R:130:3')">res$df1$char (`actual`) not identical to `expected` (`expected`).

`actual[1:4]`:   "Not Available" "B            " "Not Available" "a            "
`expected[1:4]`: "Empty        " "B            " "Not Available" "a            "</failure>
    </testcase>
    <testcase time="0.0199999999999996" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00700000000000056" classname="reformat" name="reformat_for_list_works_as_does_not_change_the_data_for_no_rules"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_list_works_as_does_not_change_the_data_for_no_rules"/>
    <testcase time="0.00699999999999967" classname="reformat" name="reformat_for_list_works_for_empty_rule"/>
    <testcase time="0.00600000000000023" classname="reformat" name="reformat_for_list_works_for_empty_rule"/>
    <testcase time="0.266" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.0220000000000002" classname="reformat" name="reformat_for_dm_works_as_expected">
      <failure type="failure" message="res$df1$char (`actual`) not identical to `expected` (`expected`). ('test-reformat.R:214:3')">res$df1$char (`actual`) not identical to `expected` (`expected`).

`actual[1:4]`:   "Not Available" "B            " "Not Available" "a            "
`expected[1:4]`: "Empty        " "B            " "Not Available" "a            "</failure>
    </testcase>
    <testcase time="0.0139999999999993" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00500000000000078" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00800000000000001" classname="reformat" name="empty_rule_do_nothing_to_input"/>
    <testcase time="0.00499999999999989" classname="reformat" name="empty_rule_do_nothing_to_input"/>
    <testcase time="0.00499999999999989" classname="reformat" name="empty_rule_do_nothing_to_input"/>
  </testsuite>
  <testsuite name="rules" timestamp="2023-05-18T13:00:01Z" hostname="5f27be1a9a29" tests="25" skipped="2" failures="0" errors="0" time="0.212">
    <testcase time="0.00999999999999979" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00699999999999967" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00400000000000045" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00499999999999989" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.0120000000000005" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.000999999999999446" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.00800000000000001" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.00400000000000045" classname="rules" name="rule_works_for_multiple_map"/>
    <testcase time="0.00800000000000001" classname="rules" name="rule_works_for_multiple_map"/>
    <testcase time="0.00999999999999979" classname="rules" name="rule_fails_when_one_value_is_mapped_to_multiple"/>
    <testcase time="0.00600000000000023" classname="rules" name="rule_fails_when_one_value_is_mapped_to_multiple"/>
    <testcase time="0.00899999999999945" classname="rules" name="rule_fails_for_values_that_is_not_character_logical_numeric"/>
    <testcase time="0.0289999999999999" classname="rules" name="rule_printed_correctly">
      <skipped message="Reason: On CRAN ('test-rules.R:45:3')"/>
    </testcase>
    <testcase time="0.0200000000000005" classname="rules" name="emtpy_rule_is_length_0_character"/>
    <testcase time="0.0140000000000002" classname="rules" name="emtpy_rule_printed_correctly">
      <skipped message="Reason: On CRAN ('test-rules.R:55:3')"/>
    </testcase>
    <testcase time="0.016" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.000999999999999446" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.0120000000000005" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.00199999999999978" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.00199999999999978" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.00800000000000001" classname="rules" name="as.list_convert_rules_into_list_correctly"/>
    <testcase time="0.00800000000000001" classname="rules" name="as.list_and_rule_are_reversible"/>
    <testcase time="0.00600000000000023" classname="rules" name="list_of_rules_are_read_correctly"/>
    <testcase time="0.00499999999999989" classname="rules" name="list_of_rules_are_read_correctly"/>
  </testsuite>
  <testsuite name="utils" timestamp="2023-05-18T13:00:02Z" hostname="5f27be1a9a29" tests="30" skipped="0" failures="0" errors="0" time="0.125">
    <testcase time="0.00999999999999979" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00100000000000033" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00300000000000011" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.000999999999999446" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00400000000000045" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00599999999999934" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00100000000000033" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00300000000000011" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.000999999999999446" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00700000000000056" classname="utils" name="h_ws_to_explicit_na_do_not_add_NA_level_when_it_do_not_exist"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_ws_to_explicit_na_do_not_add_NA_level_when_it_do_not_exist"/>
    <testcase time="0.00600000000000023" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00999999999999979" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00500000000000078" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00299999999999923" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00400000000000045" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.000999999999999446" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00999999999999979" classname="utils" name="attr_label_df_works_as_expected"/>
    <testcase time="0.00700000000000056" classname="utils" name="attr_label_df_works_as_expected"/>
  </testsuite>
</testsuites>
