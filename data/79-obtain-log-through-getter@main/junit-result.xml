<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="assertions" timestamp="2023-05-03T14:15:35Z" hostname="b6cfc070fbda" tests="14" skipped="0" failures="0" errors="0" time="0.118">
    <testcase time="0.018" classname="assertions" name="assert_valid_format_works_as_expected"/>
    <testcase time="0.0309999999999999" classname="assertions" name="assert_valid_format_works_as_expected"/>
    <testcase time="0.0350000000000001" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00199999999999978" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00100000000000011" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00099999999999989" classname="assertions" name="assert_valid_format_fails_as_expected"/>
    <testcase time="0.00600000000000001" classname="assertions" name="assert_valid_list_format_works_as_expected"/>
    <testcase time="0.00500000000000012" classname="assertions" name="assert_valid_list_format_works_as_expected"/>
    <testcase time="0.0109999999999999" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.002" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.00100000000000011" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
    <testcase time="0.00099999999999989" classname="assertions" name="assert_valid_list_format_fails_as_expected"/>
  </testsuite>
  <testsuite name="co_relevels" timestamp="2023-05-03T14:15:35Z" hostname="b6cfc070fbda" tests="22" skipped="0" failures="0" errors="0" time="0.155">
    <testcase time="0.026" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected."/>
    <testcase time="0.012" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_with_tibbles."/>
    <testcase time="0.00700000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00499999999999989" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00900000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00399999999999978" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_only_a_subset_of_levels_is_used."/>
    <testcase time="0.0069999999999999" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.004" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.00500000000000012" classname="co_relevels" name="co_relevels_works_as_expected_when_a_supplementary_level_is_used."/>
    <testcase time="0.0109999999999999" classname="co_relevels" name="co_relevels_retuns_an_error_when_the_matching_between_the_selected_column_is_not_unique."/>
    <testcase time="0.0150000000000001" classname="co_relevels" name="co_relevels_retuns_an_error_when_NAs_are_present."/>
  </testsuite>
  <testsuite name="cut_by_group" timestamp="2023-05-03T14:15:35Z" hostname="b6cfc070fbda" tests="14" skipped="0" failures="0" errors="0" time="0.089">
    <testcase time="0.0249999999999999" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.002" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_works_as_expected."/>
    <testcase time="0.00700000000000012" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.00099999999999989" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.00500000000000012" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.00499999999999989" classname="cut_by_group" name="cut_by_group_works_as_expected_when_supplementary_group_information_are_provided."/>
    <testcase time="0.0110000000000001" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.00099999999999989" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.004" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.00499999999999989" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.00500000000000012" classname="cut_by_group" name="cut_by_group_returns_NA_for_parameters_values_that_are_covered."/>
    <testcase time="0.01" classname="cut_by_group" name="cut_by_group_fails_when_the_number_of_labels_doesn_t_fit_the_number_of_breaks."/>
  </testsuite>
  <testsuite name="dm_unite" timestamp="2023-05-03T14:15:36Z" hostname="b6cfc070fbda" tests="15" skipped="0" failures="0" errors="0" time="0.823">
    <testcase time="0.306" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.002" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_characters"/>
    <testcase time="0.235" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.002" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.004" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_factors"/>
    <testcase time="0.219" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.00200000000000022" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.004" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.00499999999999989" classname="dm_unite" name="dm_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.0100000000000002" classname="dm_unite" name="ls_unite_works_as_expected_with_factors"/>
    <testcase time="0.0089999999999999" classname="dm_unite" name="ls_unite_works_as_expected_with_factors"/>
    <testcase time="0.0110000000000001" classname="dm_unite" name="ls_unite_works_as_expected_with_more_than_2_columns"/>
    <testcase time="0.004" classname="dm_unite" name="ls_unite_works_as_expected_with_more_than_2_columns"/>
  </testsuite>
  <testsuite name="explicit_na" timestamp="2023-05-03T14:15:36Z" hostname="b6cfc070fbda" tests="49" skipped="0" failures="0" errors="0" time="0.727">
    <testcase time="0.168" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.229" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00600000000000023" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="dm_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.151" classname="explicit_na" name="dm_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.0470000000000002" classname="explicit_na" name="dm_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.02" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_default_options."/>
    <testcase time="0.0129999999999999" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00099999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00200000000000022" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00199999999999978" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.00100000000000033" classname="explicit_na" name="ls_explicit_na_works_as_expected_with_optional_arguments."/>
    <testcase time="0.0089999999999999" classname="explicit_na" name="ls_explicit_na_skip_if_all_datasets_excluded"/>
    <testcase time="0.00499999999999989" classname="explicit_na" name="ls_explicit_na_skip_if_all_datasets_excluded"/>
  </testsuite>
  <testsuite name="filter" timestamp="2023-05-03T14:15:37Z" hostname="b6cfc070fbda" tests="36" skipped="0" failures="12" errors="0" time="0.684">
    <testcase time="0.0110000000000001" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.012" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.143" classname="filter" name="log_filter_works_for_single_data.frame">
      <failure type="failure" message="`df1_attr` (`actual`) not identical to list(`Sepal.Length &gt;= 7` = c(150L, 13L)) (`expected`). ('test-filter.R:8:3')">`df1_attr` (`actual`) not identical to list(`Sepal.Length &gt;= 7` = c(150L, 13L)) (`expected`).

`names(actual)`:   " Sepal.Length &gt;= 7"
`names(expected)`: "Sepal.Length &gt;= 7" 

`actual$ Sepal.Length &gt;= 7` is an integer vector (150, 13)
`expected$ Sepal.Length &gt;= 7` is absent

`actual$Sepal.Length &gt;= 7` is absent
`expected$Sepal.Length &gt;= 7` is an integer vector (150, 13)</failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.00700000000000012" classname="filter" name="log_filter_works_for_single_data.frame"/>
    <testcase time="0.0359999999999996" classname="filter" name="log_filter_works_for_single_data.frame">
      <failure type="failure" message="`df3_attr` (`actual`) not identical to list(...) (`expected`). ('test-filter.R:13:3')">`df3_attr` (`actual`) not identical to list(...) (`expected`).

`names(actual)`:   " Sepal.Length &gt;= 7" " Sepal.Width &gt;= 3"
`names(expected)`: "Sepal.Length &gt;= 7"  "Sepal.Width &gt;= 3" 

`actual$ Sepal.Length &gt;= 7` is an integer vector (150, 13)
`expected$ Sepal.Length &gt;= 7` is absent

`actual$ Sepal.Width &gt;= 3` is an integer vector (13, 9)
`expected$ Sepal.Width &gt;= 3` is absent

`actual$Sepal.Length &gt;= 7` is absent
`expected$Sepal.Length &gt;= 7` is an integer vector (150, 13)

`actual$Sepal.Width &gt;= 3` is absent
`expected$Sepal.Width &gt;= 3` is an integer vector (13, 9)</failure>
    </testcase>
    <testcase time="0.028" classname="filter" name="log_filter_fails_if_variable_outside_data_environment"/>
    <testcase time="0.00300000000000011" classname="filter" name="log_filter_fails_if_variable_outside_data_environment"/>
    <testcase time="0.00600000000000023" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00699999999999967" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.0220000000000002" classname="filter" name="log_filter_works_for_list_of_data.frame">
      <failure type="failure" message="`df1_attr` (`actual`) not identical to list(`Sepal.Length &gt;= 7` = c(150L, 13L)) (`expected`). ('test-filter.R:34:3')">`df1_attr` (`actual`) not identical to list(`Sepal.Length &gt;= 7` = c(150L, 13L)) (`expected`).

`names(actual)`:   " Sepal.Length &gt;= 7"
`names(expected)`: "Sepal.Length &gt;= 7" 

`actual$ Sepal.Length &gt;= 7` is an integer vector (150, 13)
`expected$ Sepal.Length &gt;= 7` is absent

`actual$Sepal.Length &gt;= 7` is absent
`expected$Sepal.Length &gt;= 7` is an integer vector (150, 13)</failure>
    </testcase>
    <testcase time="0.012" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.00599999999999978" classname="filter" name="log_filter_works_for_list_of_data.frame"/>
    <testcase time="0.0230000000000001" classname="filter" name="log_filter_works_for_list_of_data.frame">
      <failure type="failure" message="`df3_attr` (`actual`) not identical to list(...) (`expected`). ('test-filter.R:39:3')">`df3_attr` (`actual`) not identical to list(...) (`expected`).

`names(actual)`:   " Sepal.Length &gt;= 7" " Sepal.Width &gt;= 3"
`names(expected)`: "Sepal.Length &gt;= 7"  "Sepal.Width &gt;= 3" 

`actual$ Sepal.Length &gt;= 7` is an integer vector (150, 13)
`expected$ Sepal.Length &gt;= 7` is absent

`actual$ Sepal.Width &gt;= 3` is an integer vector (13, 9)
`expected$ Sepal.Width &gt;= 3` is absent

`actual$Sepal.Length &gt;= 7` is absent
`expected$Sepal.Length &gt;= 7` is an integer vector (150, 13)

`actual$Sepal.Width &gt;= 3` is absent
`expected$Sepal.Width &gt;= 3` is an integer vector (13, 9)</failure>
    </testcase>
    <testcase time="0.0209999999999999" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00499999999999989" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.004" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.0220000000000002" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame">
      <failure type="failure" message="attr(df1$adsl, &quot;rows&quot;) (`actual`) not identical to list(`b &gt;= 7` = c(10L, 4L)) (`expected`). ('test-filter.R:50:3')">attr(df1$adsl, "rows") (`actual`) not identical to list(`b &gt;= 7` = c(10L, 4L)) (`expected`).

`names(actual)`:   " b &gt;= 7"
`names(expected)`: "b &gt;= 7" 

`actual$ b &gt;= 7` is an integer vector (10, 4)
`expected$ b &gt;= 7` is absent

`actual$b &gt;= 7` is absent
`expected$b &gt;= 7` is an integer vector (10, 4)</failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="filter" name="log_filter_subset_USUBJID_for_list_of_data.frame"/>
    <testcase time="0.00699999999999967" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.0190000000000001" classname="filter" name="get_log_works_as_expected">
      <failure type="failure" message="res$adsl (`actual`) not identical to &quot;b &gt;= 7 [10 --&gt; 4 rows.]&quot; (`expected`). ('test-filter.R:63:3')">res$adsl (`actual`) not identical to "b &gt;= 7 [10 --&gt; 4 rows.]" (`expected`).

`actual`:   " b &gt;= 7 [10 --&gt; 4 rows.]"
`expected`: "b &gt;= 7 [10 --&gt; 4 rows.]" </failure>
    </testcase>
    <testcase time="0.0150000000000001" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00299999999999967" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.00200000000000022" classname="filter" name="get_log_works_as_expected"/>
    <testcase time="0.0189999999999997" classname="filter" name="get_log_works_as_expected">
      <failure type="failure" message="res2$adsl (`actual`) not identical to &quot;b &gt;= 7 [10 --&gt; 4 rows.]&quot; (`expected`). ('test-filter.R:69:3')">res2$adsl (`actual`) not identical to "b &gt;= 7 [10 --&gt; 4 rows.]" (`expected`).

`actual`:   " b &gt;= 7 [10 --&gt; 4 rows.]"
`expected`: "b &gt;= 7 [10 --&gt; 4 rows.]" </failure>
    </testcase>
    <testcase time="0.0390000000000001" classname="filter" name="get_log_works_as_expected">
      <failure type="failure" message="res2$dfb (`actual`) not identical to c(&quot;Filtered by adsl: b &gt;= 7 [10 --&gt; 4 rows.]&quot;, &quot;c &gt;= 3 [4 --&gt; 2 rows.]&quot;) (`expected`). ('test-filter.R:70:3')">res2$dfb (`actual`) not identical to c("Filtered by adsl: b &gt;= 7 [10 --&gt; 4 rows.]", "c &gt;= 3 [4 --&gt; 2 rows.]") (`expected`).

actual vs expected
  "Filtered by adsl: b &gt;= 7 [10 --&gt; 4 rows.]"
- " c &gt;= 3 [4 --&gt; 2 rows.]"
+ "c &gt;= 3 [4 --&gt; 2 rows.]"</failure>
    </testcase>
    <testcase time="0.0180000000000002" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.0259999999999998" classname="filter" name="print_log_works_as_expected">
      <failure type="failure" message="`res` (`actual`) not identical to c(...) (`expected`). ('test-filter.R:83:3')">`res` (`actual`) not identical to c(...) (`expected`).

actual vs expected
  "Filter Log:"
  "  - adsl:"
- "   b &gt;= 7 [10 --&gt; 4 rows.]"
+ "  b &gt;= 7 [10 --&gt; 4 rows.]"
  "  - dfb:"
  "  Filtered by adsl: b &gt;= 7 [10 --&gt; 4 rows.]"</failure>
    </testcase>
    <testcase time="0.012" classname="filter" name="print_log_works_as_expected"/>
    <testcase time="0.0270000000000001" classname="filter" name="print_log_works_as_expected">
      <failure type="failure" message="`res2` (`actual`) not identical to c(...) (`expected`). ('test-filter.R:97:3')">`res2` (`actual`) not identical to c(...) (`expected`).

actual vs expected
  "Filter Log:"
  "  - adsl:"
- "   b &gt;= 7 [10 --&gt; 4 rows.]"
+ "  b &gt;= 7 [10 --&gt; 4 rows.]"
  "  - dfb:"
  "  Filtered by adsl: b &gt;= 7 [10 --&gt; 4 rows.] "
- "   c &gt;= 3 [4 --&gt; 2 rows.]"
+ "  c &gt;= 3 [4 --&gt; 2 rows.]"</failure>
    </testcase>
    <testcase time="0.0219999999999998" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.004" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.00300000000000011" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed"/>
    <testcase time="0.0249999999999999" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed">
      <failure type="failure" message="`res` (`actual`) not identical to c(...) (`expected`). ('test-filter.R:141:3')">`res` (`actual`) not identical to c(...) (`expected`).

    actual                       | expected                       
[2] "  - adsl:"                  | "  - adsl:"                 [2]
[3] "  No filtering [10 rows.]"  | "  No filtering [10 rows.]" [3]
[4] "  - dfb:"                   | "  - dfb:"                  [4]
[5] "   c &gt;= 7 [10 --&gt; 4 rows.]" - "  c &gt;= 7 [10 --&gt; 4 rows.]" [5]</failure>
    </testcase>
    <testcase time="0.028" classname="filter" name="print_log_works_as_expect_when_no_filtering_is_performed">
      <failure type="failure" message="`res` (`actual`) not identical to c(&quot;Filter Log:&quot;, &quot;  - dfb:&quot;, &quot;  c &gt;= 7 [10 --&gt; 4 rows.]&quot;) (`expected`). ('test-filter.R:154:3')">`res` (`actual`) not identical to c("Filter Log:", "  - dfb:", "  c &gt;= 7 [10 --&gt; 4 rows.]") (`expected`).

`actual`:   "Filter Log:" "  - dfb:" "   c &gt;= 7 [10 --&gt; 4 rows.]"
`expected`: "Filter Log:" "  - dfb:" "  c &gt;= 7 [10 --&gt; 4 rows.]" </failure>
    </testcase>
  </testsuite>
  <testsuite name="join_adsub_adsl" timestamp="2023-05-03T14:15:38Z" hostname="b6cfc070fbda" tests="33" skipped="0" failures="0" errors="0" time="2.387">
    <testcase time="0.488" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_with_default_values"/>
    <testcase time="0.333" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.324" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.316" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.dm_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.407" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_column_already_exist_in_adsl."/>
    <testcase time="0.398" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.dm_throw_a_warning_when_two_new_columns_would_have_the_same_name."/>
    <testcase time="0.0170000000000003" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00399999999999956" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.00399999999999956" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_with_default_values"/>
    <testcase time="0.016" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0120000000000005" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00199999999999978" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00100000000000033" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0120000000000005" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.000999999999999446" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.00200000000000067" classname="join_adsub_adsl" name="join_adsub_adsl.list_works_as_expected_when_no_column_is_selected"/>
    <testcase time="0.0259999999999998" classname="join_adsub_adsl" name="join_adsub_adsl.list_throw_a_warning_when_column_already_exist_in_adsl."/>
  </testsuite>
  <testsuite name="pivot" timestamp="2023-05-03T14:15:40Z" hostname="b6cfc070fbda" tests="17" skipped="0" failures="0" errors="0" time="0.13">
    <testcase time="0.0119999999999996" classname="pivot" name="mini_pivot_wider_works_as_expected."/>
    <testcase time="0.00499999999999989" classname="pivot" name="mini_pivot_wider_works_as_expected."/>
    <testcase time="0.0100000000000007" classname="pivot" name="mini_pivot_wider_returns_an_error_when_required_column_are_not_present."/>
    <testcase time="0.00999999999999979" classname="pivot" name="mini_pivot_wider_returns_an_error_when_data_are_duplicated."/>
    <testcase time="0.00800000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected."/>
    <testcase time="0.00399999999999956" classname="pivot" name="multi_pivot_wider_works_as_expected."/>
    <testcase time="0.00900000000000034" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00400000000000045" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00899999999999945" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.00400000000000045" classname="pivot" name="multi_pivot_wider_works_as_expected_with_drop_na_argument."/>
    <testcase time="0.0110000000000001" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.00399999999999956" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.00499999999999989" classname="pivot" name="multi_pivot_wider_works_as_expected_when_the_unique_identification_deoends_on_several_columns"/>
    <testcase time="0.0149999999999997" classname="pivot" name="poly_pivot_wider_works_as_expected."/>
    <testcase time="0.00500000000000078" classname="pivot" name="poly_pivot_wider_works_as_expected."/>
    <testcase time="0.00999999999999979" classname="pivot" name="poly_pivot_wider_works_as_expected_with_default_label."/>
    <testcase time="0.00499999999999989" classname="pivot" name="poly_pivot_wider_works_as_expected_with_default_label."/>
  </testsuite>
  <testsuite name="propagate" timestamp="2023-05-03T14:15:40Z" hostname="b6cfc070fbda" tests="9" skipped="4" failures="0" errors="0" time="0.478">
    <testcase time="0.0730000000000004" classname="propagate" name="propagate.list_works_as_expected">
      <skipped message="Reason: On CRAN ('test-propagate.R:16:3')"/>
    </testcase>
    <testcase time="0.0199999999999996" classname="propagate" name="propagate.list_works_as_expected_in_safe_mode"/>
    <testcase time="0.00999999999999979" classname="propagate" name="propagate.list_works_as_expected_in_safe_mode">
      <skipped message="Reason: On CRAN ('test-propagate.R:35:3')"/>
    </testcase>
    <testcase time="0.172000000000001" classname="propagate" name="propagate.dm_works_as_expected"/>
    <testcase time="0.0209999999999999" classname="propagate" name="propagate.dm_works_as_expected">
      <skipped message="Reason: On CRAN ('test-propagate.R:56:3')"/>
    </testcase>
    <testcase time="0.143" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.00100000000000033" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.024" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode"/>
    <testcase time="0.0139999999999993" classname="propagate" name="propagate.dm_works_as_expected_in_safe_mode">
      <skipped message="Reason: On CRAN ('test-propagate.R:75:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="reformat" timestamp="2023-05-03T14:15:41Z" hostname="b6cfc070fbda" tests="29" skipped="0" failures="0" errors="0" time="0.534">
    <testcase time="0.024" classname="reformat" name="reformat_fails_for_numeric_or_logical"/>
    <testcase time="0.00800000000000001" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_FALSE"/>
    <testcase time="0.00900000000000034" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE"/>
    <testcase time="0.00899999999999945" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE_and_na_last_is_false"/>
    <testcase time="0.00600000000000023" classname="reformat" name="reformat_for_characters_works_as_expected_when_string_as_fct_is_TRUE_and_na_last_is_false"/>
    <testcase time="0.00800000000000001" classname="reformat" name="reformat_for_factors_works_as_expected"/>
    <testcase time="0.00999999999999979" classname="reformat" name="reformat_for_factors_works_as_expected"/>
    <testcase time="0.00500000000000078" classname="reformat" name="reformat_for_factors_works_as_expected"/>
    <testcase time="0.00599999999999934" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist"/>
    <testcase time="0.00400000000000045" classname="reformat" name="reformat_factor_works_as_expected_when_the_level_doesn_t_exist"/>
    <testcase time="0.00699999999999967" classname="reformat" name="reformat_factor_works_as_expected_when_na_last_FALSE"/>
    <testcase time="0.00400000000000045" classname="reformat" name="reformat_factor_works_as_expected_when_na_last_FALSE"/>
    <testcase time="0.00800000000000001" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00400000000000045" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="reformat" name="reformat_for_list_works_as_expected"/>
    <testcase time="0.00700000000000056" classname="reformat" name="reformat_for_list_works_as_does_not_change_the_data_for_no_rules"/>
    <testcase time="0.00399999999999956" classname="reformat" name="reformat_for_list_works_as_does_not_change_the_data_for_no_rules"/>
    <testcase time="0.00699999999999967" classname="reformat" name="reformat_for_list_works_for_empty_rule"/>
    <testcase time="0.00500000000000078" classname="reformat" name="reformat_for_list_works_for_empty_rule"/>
    <testcase time="0.351" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00400000000000045" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="reformat" name="reformat_for_dm_works_as_expected"/>
    <testcase time="0.00800000000000001" classname="reformat" name="empty_rule_do_nothing_to_input"/>
    <testcase time="0.00400000000000045" classname="reformat" name="empty_rule_do_nothing_to_input"/>
    <testcase time="0.00499999999999989" classname="reformat" name="empty_rule_do_nothing_to_input"/>
  </testsuite>
  <testsuite name="rules" timestamp="2023-05-03T14:15:41Z" hostname="b6cfc070fbda" tests="25" skipped="2" failures="0" errors="0" time="0.203">
    <testcase time="0.00899999999999945" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00700000000000056" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00499999999999989" classname="rules" name="rule_create_works_with_arguments"/>
    <testcase time="0.00399999999999956" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.0120000000000005" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.000999999999999446" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.00700000000000056" classname="rules" name="rule_coerce_logical_numeric_to_character"/>
    <testcase time="0.00499999999999989" classname="rules" name="rule_works_for_multiple_map"/>
    <testcase time="0.00600000000000023" classname="rules" name="rule_works_for_multiple_map"/>
    <testcase time="0.00999999999999979" classname="rules" name="rule_fails_when_one_value_is_mapped_to_multiple"/>
    <testcase time="0.00600000000000023" classname="rules" name="rule_fails_when_one_value_is_mapped_to_multiple"/>
    <testcase time="0.00899999999999945" classname="rules" name="rule_fails_for_values_that_is_not_character_logical_numeric"/>
    <testcase time="0.0280000000000005" classname="rules" name="rule_printed_correctly">
      <skipped message="Reason: On CRAN ('test-rules.R:45:3')"/>
    </testcase>
    <testcase time="0.0190000000000001" classname="rules" name="emtpy_rule_is_length_0_character"/>
    <testcase time="0.00899999999999945" classname="rules" name="emtpy_rule_printed_correctly">
      <skipped message="Reason: On CRAN ('test-rules.R:55:3')"/>
    </testcase>
    <testcase time="0.0190000000000001" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="rules" name="list2rules_works_as_expected"/>
    <testcase time="0.0110000000000001" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.000999999999999446" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.00200000000000067" classname="rules" name="list2rules_fails_as_expected"/>
    <testcase time="0.00800000000000001" classname="rules" name="as.list_convert_rules_into_list_correctly"/>
    <testcase time="0.00800000000000001" classname="rules" name="as.list_and_rule_are_reversible"/>
    <testcase time="0.00599999999999934" classname="rules" name="list_of_rules_are_read_correctly"/>
    <testcase time="0.00499999999999989" classname="rules" name="list_of_rules_are_read_correctly"/>
  </testsuite>
  <testsuite name="utils" timestamp="2023-05-03T14:15:41Z" hostname="b6cfc070fbda" tests="30" skipped="0" failures="0" errors="0" time="0.122">
    <testcase time="0.00900000000000034" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00100000000000033" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00199999999999978" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00199999999999978" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00400000000000045" classname="utils" name="h_ws_to_na_works_as_expected."/>
    <testcase time="0.00599999999999934" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00100000000000033" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00300000000000011" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.000999999999999446" classname="utils" name="h_ws_to_explicit_na_works_as_expected."/>
    <testcase time="0.00600000000000023" classname="utils" name="h_ws_to_explicit_na_do_not_add_NA_level_when_it_do_not_exist"/>
    <testcase time="0.00400000000000045" classname="utils" name="h_ws_to_explicit_na_do_not_add_NA_level_when_it_do_not_exist"/>
    <testcase time="0.00599999999999934" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00199999999999978" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00900000000000034" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.000999999999999446" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00500000000000078" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00100000000000033" classname="utils" name="h_as_factor_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="attr_label_works_as_expected"/>
    <testcase time="0.00899999999999945" classname="utils" name="attr_label_df_works_as_expected"/>
    <testcase time="0.00700000000000056" classname="utils" name="attr_label_df_works_as_expected"/>
  </testsuite>
</testsuites>
