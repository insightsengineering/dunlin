[{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla‚Äôs code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üë∂ Getting started üìî Code Conduct üóÉ License üìú Issues üö© Pull requests üíª Coding guidelines üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Contribution Guidelines","text":"Please refer project documentation brief introduction. Please also see articles within project documentation additional information.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contribution Guidelines","text":"Code Conduct governs project. Participants contributors expected follow rules outlined therein.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"github-flow","dir":"","previous_headings":"Pull requests","what":"Github Flow","title":"Contribution Guidelines","text":"repository uses Github Flow model collaboration. submit pull request: Create branch Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes Make sure code passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR) pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, Post approval Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"branch-naming-convention","dir":"","previous_headings":"Pull requests","what":"Branch naming convention","title":"Contribution Guidelines","text":"Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation. example, 420_fix_ui_bug suitable branch name change resolving UI-related bug reported issue number 420 current project. change affects multiple repositories, please name branches follows: <issue_id>_<issue_repo>_<short description>. example, 69_awesomeproject_fix_spelling_error reference issue 69 reported project awesomeproject aims resolve one spelling errors multiple (likely related) repositories.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"monorepo-and-stageddependencies","dir":"","previous_headings":"Pull requests","what":"monorepo and staged.dependencies","title":"Contribution Guidelines","text":"Sometimes might need change upstream dependent package(s) able submit meaningful change. using staged.dependencies functionality simulate monorepo behavior. dependency configuration already specified project‚Äôs staged_dependencies.yaml file. need name feature branches appropriately. exception branch naming convention described . Please refer staged.dependencies package documentation details.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"coding-guidelines","dir":"","previous_headings":"","what":"Coding guidelines","title":"Contribution Guidelines","text":"repository follows unified processes standards adopted maintainers ensure software development carried consistently within teams cohesively across repositories.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"Coding guidelines","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"dependency-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency management","title":"Contribution Guidelines","text":"Lightweight right weight. repository follows tinyverse recommedations limiting dependencies minimum.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"dependency-version-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency version management","title":"Contribution Guidelines","text":"code compatible (!) historical versions given dependenct package, required specify minimal version DESCRIPTION file. particular: development version requires (imports) development version another package - required put abc (>= 1.2.3.9000).","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"r--package-versions","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"R & package versions","title":"Contribution Guidelines","text":"continuously test packages newest R version along recent dependencies CRAN BioConductor. recommend working environment also set way. can find details R version packages used R CMD check GitHub Action execution log - step prints R sessionInfo(). discover bugs older R versions older set dependencies, please create relevant bug reports.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"pre-commit","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"pre-commit","title":"Contribution Guidelines","text":"highly recommend use pre-commit tool combined R hooks pre-commit execute checks committing pushing changes. Pre-commit hooks already available repository‚Äôs .pre-commit-config.yaml file.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"mentioned previously, contributions deeply valued appreciated. contribution data available part repository insights, recognize significant contribution hence add contributor package authors list, following rules enforced: Minimum 5% lines code authored* (determined git blame query) top 5 contributors terms number commits lines added lines removed* *Excluding auto-generated code, including limited roxygen comments renv.lock files. package maintainer also reserves right adjust criteria recognize contributions.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/SECURITY.html","id":"reporting-security-issues","dir":"","previous_headings":"","what":"Reporting Security Issues","title":"Security Policy","text":"believe found security vulnerability repositories organization, please report us coordinated disclosure. Please report security vulnerabilities public GitHub issues, discussions, pull requests. Instead, please send email vulnerability.management[@]roche.com. Please include much information listed can help us better understand resolve issue: type issue (e.g., buffer overflow, SQL injection, cross-site scripting) Full paths source file(s) related manifestation issue location affected source code (tag/branch/commit direct URL) special configuration required reproduce issue Step--step instructions reproduce issue Proof--concept exploit code (possible) Impact issue, including attacker might exploit issue information help us triage report quickly.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/SECURITY.html","id":"data-security-standards-dss","dir":"","previous_headings":"","what":"Data Security Standards (DSS)","title":"Security Policy","text":"Please make sure reporting issues form bug, feature, pull request, sensitive information PII, PHI, PCI completely removed text attachments, including pictures videos.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reformatting","text":"Reformatting dulin consists replacing predetermined values another particular variables selected tables data set stored form dm object. performed two steps: Reformatting Map (list object) created specifies correspondence old new values reformatting performed dunlin::apply_reformat() function.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"the-formatting-map-structure","dir":"Articles","previous_headings":"","what":"The Formatting Map Structure","title":"Reformatting","text":"Reformatting Map list object 4 hierarchic levels. Table Name: Typically one values returned names(db) db dm object. instance, case adam data set, adsl adae etc‚Ä¶ Variable Name: name column table dm object. instance ACTARM. Key: new value replace old ones Values: vector values, replaced associated key. keyword, HIGHER, lower Mixed case, can used instead table name indicate particular variable changed every table appears. values can string, character vector NA. Values present original table listed mapping left unchanged, except altered columns turned factor class. original variable factor, non-transformed levels preserved even corresponding value appear. order keys appear determine order levels output. Hence function can used re level variables. However, level replacing missing values automatically placed last.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"example-of-reformatting-map","dir":"Articles","previous_headings":"The Formatting Map Structure","what":"Example of Reformatting Map","title":"Reformatting","text":"","code":"my_map <- list(   # This is the Table Name.   airlines = list(     # This is the Variable Name.     name = list(       # `AE` is the Key, `c(\"American Airlines Inc.\")` is the value.       \"AE\" = c(\"American Airlines Inc.\"),       \"Alaska and Hawaiian Airlines\" = c(\"Alaska Airlines Inc.\", \"Hawaiian Airlines Inc.\")     )   ),   planes = list(     manufacturer = list(       \"Airbus\" = \"AIRBUS INDUSTRIE\",       \"New Level\" = \"new_level\",       \"<Missing>\" = NA     ),     model = list(       \"EMB-145\" = c(\"EMB-145XR\"),       \"Other 737\" = c(\"737-824\", \"737-724\", \"737-732\")     )   ),   All = list(     year = list(       \"Current\" = \"2013\"     )   ) )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"re-formatting","dir":"Articles","previous_headings":"","what":"Re Formatting","title":"Reformatting","text":"re formatting map defined, reformatting can performed dm object.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"example","dir":"Articles","previous_headings":"Re Formatting","what":"Example","title":"Reformatting","text":"","code":"db <- dm::dm_nycflights13()  db <-   db %>%   dm_zoom_to(planes) %>%   mutate(manufacturer = ifelse(manufacturer == \"EMBRAER\", NA, manufacturer)) %>%   dm_update_zoomed()  res <- apply_reformat(db, format = my_map) head(db$airlines$name) #> [1] \"Endeavor Air Inc.\"        \"American Airlines Inc.\"   #> [3] \"Alaska Airlines Inc.\"     \"JetBlue Airways\"          #> [5] \"Delta Air Lines Inc.\"     \"ExpressJet Airlines Inc.\" head(res$airlines$name) #> [1] Endeavor Air Inc.            AE                           #> [3] Alaska and Hawaiian Airlines JetBlue Airways              #> [5] Delta Air Lines Inc.         ExpressJet Airlines Inc.     #> 14 Levels: AE Alaska and Hawaiian Airlines ... Virgin America  # New levels are introduced and missing values can be replaced. head(db$planes$manufacturer) #> [1] NA                 \"AIRBUS INDUSTRIE\" NA                 \"AIRBUS INDUSTRIE\" #> [5] \"AIRBUS INDUSTRIE\" NA head(res$planes$manufacturer) #> [1] <Missing> Airbus    <Missing> Airbus    Airbus    <Missing> #> 16 Levels: Airbus New Level AIRBUS BEECH BOEING BOMBARDIER INC ... <Missing>  # Using the `All` keyword changes several tables. head(db$weather$year) #> [1] 2013 2013 2013 2013 2013 2013 head(res$weather$year) #> [1] Current Current Current Current Current Current #> Levels: Current  head(db$flights$year) #> [1] 2013 2013 2013 2013 2013 2013 head(res$flights$year) #> [1] Current Current Current Current Current Current #> Levels: Current"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/articles/Reformatting.html","id":"reformatting-map-with-null-values","dir":"Articles","previous_headings":"","what":"Reformatting Map with NULL values","title":"Reformatting","text":"Reformatting functions tolerate NULL values reformatting maps. following example, table df2 left unchanged well logi column df1 table. char column, k reformatted column changed factor. B wont included levels.","code":"# This is a valid reformatting map null_map <- list(   df1 = list(     char = list(       \"A\" = c(\"a\", \"k\"),       \"B\" = NULL     ),     logi = NULL   ),   df2 = NULL )  assert_reformat(null_map)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benoit Falquet. Author, maintainer. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falquet B (2023). dunlin: Preprocessing tools clinical trial data. R package version 0.1.1.9010.","code":"@Manual{,   title = {dunlin: Preprocessing tools for clinical trial data},   author = {Benoit Falquet},   year = {2023},   note = {R package version 0.1.1.9010}, }"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/index.html","id":"dunlin","dir":"","previous_headings":"","what":"Preprocessing tools for clinical trial data","title":"Preprocessing tools for clinical trial data","text":"Data tools Pharma","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat values ‚Äî apply_reformat","title":"Reformat values ‚Äî apply_reformat","text":"Reformat values","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat values ‚Äî apply_reformat","text":"","code":"apply_reformat(db, format = NULL)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat values ‚Äî apply_reformat","text":"db (dm) object input. format (list) specific format.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat values ‚Äî apply_reformat","text":"dm object re coded variables factor. reformatted, original levels preserved.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reformat values ‚Äî apply_reformat","text":"Using keyword table name change corresponding variable every table appears.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/apply_reformat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat values ‚Äî apply_reformat","text":"","code":"library(dm) #>  #> Attaching package: ‚Äòdm‚Äô #> The following object is masked from ‚Äòpackage:stats‚Äô: #>  #>     filter  df1 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA) ) df2 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\"), levels = c(\"f1\", \"f2\", \"fx\")),   \"num\" = 1:6 )  db <- dm(df1, df2)  new_formats <- list(   df1 = list(     char = list(       \"A\" = c(\"a\", \"k\"),       \"B\" = \"b\"     )   ),   df2 = list(     num = list(       \"11\" = \"1\",       \"22\" = \"2\"     )   ),   ALL = list(     fact = list(       \"F1\" = \"f1\",       \"F2\" = \"f2\",       \"FX\" = \"fx\",       \"<Missing>\" = NA     ),     other = list(       \"x\" = \"X\"     )   ) )  res <- apply_reformat(db, new_formats)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/assert_reformat.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert the Reformatting Map. ‚Äî assert_reformat","title":"Assert the Reformatting Map. ‚Äî assert_reformat","text":"Assert Reformatting Map.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/assert_reformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert the Reformatting Map. ‚Äî assert_reformat","text":"","code":"assert_reformat(map)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/assert_reformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert the Reformatting Map. ‚Äî assert_reformat","text":"map (list)","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/assert_reformat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert the Reformatting Map. ‚Äî assert_reformat","text":"NULL map object fits criteria mapping list.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/assert_reformat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert the Reformatting Map. ‚Äî assert_reformat","text":"","code":"my_map <- list(   df1 = list(     char = list(       \"A\" = c(\"a\", \"k\"),       \"B\" = \"b\"     ),     char2 = list(       \"A\" = c(\"a\", \"k\"),       \"B\" = \"b\"     )   ),   df2 = list(     num = list(       \"11\" = \"1\",       \"22\" = NA     )   ),   All = list(     fact = list(       \"F1\" = \"f1\",       \"F2\" = \"f2\"     ),     other = list(       \"x\" = \"X\"     )   ) )  assert_reformat(my_map)  my_map <- list(   df0 = NULL,   df1 = list(     char = NULL,     char2 = list(       \"A\" = c(\"a\", \"k\"),       \"B\" = \"b\"     )   ) )  assert_reformat(my_map)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the Label Attribute ‚Äî attr_label","title":"Setting the Label Attribute ‚Äî attr_label","text":"Setting Label Attribute","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the Label Attribute ‚Äî attr_label","text":"","code":"attr_label(var, label)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the Label Attribute ‚Äî attr_label","text":"var (object) whose label attribute can set. label (character) label add.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting the Label Attribute ‚Äî attr_label","text":"object label attribute.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting the Label Attribute ‚Äî attr_label","text":"","code":"x <- c(1:10) attr(x, \"label\") #> NULL  y <- attr_label(x, \"my_label\") attr(y, \"label\") #> [1] \"my_label\""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"Setting Label Attribute Data Frame Columns","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"","code":"attr_label_df(df, label)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"df (data.frame). label (character) labels add.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"data.frame label attributes.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/attr_label_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"","code":"res <- attr_label_df(mtcars, letters[1:11]) res #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 lapply(res, attr, \"label\") #> $mpg #> [1] \"a\" #>  #> $cyl #> [1] \"b\" #>  #> $disp #> [1] \"c\" #>  #> $hp #> [1] \"d\" #>  #> $drat #> [1] \"e\" #>  #> $wt #> [1] \"f\" #>  #> $qsec #> [1] \"g\" #>  #> $vs #> [1] \"h\" #>  #> $am #> [1] \"i\" #>  #> $gear #> [1] \"j\" #>  #> $carb #> [1] \"k\" #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/co_relevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"Reorder Two Columns Levels Simultaneously","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/co_relevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"","code":"co_relevels(df, primary, secondary, levels_primary)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/co_relevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"df (data.frame) two column whose factors reordered. primary (string) name column levels reordering based. secondary (string) name column whose levels reordered following levels primary column. levels_primary (character) levels desired order. Existing levels included placed afterward current order.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/co_relevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"function expect 1:1 matching elements two selected column.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/co_relevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"","code":"df <- data.frame(   SUBJID = 1:3,   PARAMCD = factor(c(\"A\", \"B\", \"C\")),   PARAM = factor(paste(\"letter\", LETTERS[1:3])) ) co_relevels(df, \"PARAMCD\", \"PARAM\", levels_primary = c(\"C\", \"A\", \"B\")) #>   SUBJID PARAMCD    PARAM #> 1      1       A letter A #> 2      2       B letter B #> 3      3       C letter C"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Cutting data by group ‚Äî cut_by_group","title":"Cutting data by group ‚Äî cut_by_group","text":"Cutting data group","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cutting data by group ‚Äî cut_by_group","text":"","code":"cut_by_group(df, col_data, col_group, group, cat_col)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cutting data by group ‚Äî cut_by_group","text":"df (dataframe) column data cut column specifying group observation. col_data (character) column containing data cut. col_group (character) column containing names groups according data split. group (nested list) providing parameter value analyzed categorical way: name parameter (character), series breakpoints (numeric) first breakpoints typically -Inf last Inf, series name describe category (character). cat_col (character) name new column cut label stored.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cutting data by group ‚Äî cut_by_group","text":"data.frame column containing categorical values.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cutting data by group ‚Äî cut_by_group","text":"Function used categorize numeric data stored long format depending group. Intervals closed right (open left).","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/cut_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cutting data by group ‚Äî cut_by_group","text":"","code":"group <- list(   list(     \"Height\",     c(-Inf, 150, 170, Inf),     c(\"=<150\", \"150-170\", \">170\")   ),   list(     \"Weight\",     c(-Inf, 65, Inf),     c(\"=<65\", \">65\")   ),   list(     \"Age\",     c(-Inf, 31, Inf),     c(\"=<31\", \">31\")   ),   list(     \"PreCondition\",     c(-Inf, 1, Inf),     c(\"=<1\", \"<1\")   ) ) data <- data.frame(   SUBJECT = rep(letters[1:10], 4),   PARAM = rep(c(\"Height\", \"Weight\", \"Age\", \"other\"), each = 10),   AVAL = c(rnorm(10, 165, 15), rnorm(10, 65, 5), runif(10, 18, 65), rnorm(10, 0, 1)),   index = 1:40 )  cut_by_group(data, \"AVAL\", \"PARAM\", group, \"my_new_categories\") #>    SUBJECT  PARAM        AVAL index my_new_categories #> 1        a Height 153.1629704     1           150-170 #> 2        b Height 129.3341270     2             =<150 #> 3        c Height 178.0614270     3              >170 #> 4        d Height 181.4607255     4              >170 #> 5        e Height 158.0541546     5           150-170 #> 6        f Height 149.4678054     6             =<150 #> 7        g Height 201.2372294     7              >170 #> 8        h Height 166.4499063     8           150-170 #> 9        i Height 164.8351262     9           150-170 #> 10       j Height 164.2075257    10           150-170 #> 11       a Weight  70.8890740    11               >65 #> 12       b Weight  63.3183055    12              =<65 #> 13       c Weight  69.3625435    13               >65 #> 14       d Weight  58.3580305    14              =<65 #> 15       e Weight  73.2355160    15               >65 #> 16       f Weight  62.0452534    16              =<65 #> 17       g Weight  70.8721084    17               >65 #> 18       h Weight  61.7141056    18              =<65 #> 19       i Weight  69.3952961    19               >65 #> 20       j Weight  60.6072826    20              =<65 #> 21       a    Age  58.1326049    21               >31 #> 22       b    Age  52.4674769    22               >31 #> 23       c    Age  43.7397763    23               >31 #> 24       d    Age  32.1927012    24               >31 #> 25       e    Age  41.3387877    25               >31 #> 26       f    Age  54.2420382    26               >31 #> 27       g    Age  27.3003088    27              =<31 #> 28       h    Age  21.5727597    28              =<31 #> 29       i    Age  62.6027660    29               >31 #> 30       j    Age  31.3133930    30               >31 #> 31       a  other  -0.8632284    31              <NA> #> 32       b  other  -0.9601284    32              <NA> #> 33       c  other   1.8060664    33              <NA> #> 34       d  other   0.8748184    34              <NA> #> 35       e  other  -0.8400238    35              <NA> #> 36       f  other  -0.3800949    36              <NA> #> 37       g  other  -2.1026478    37              <NA> #> 38       h  other  -1.4036098    38              <NA> #> 39       i  other   0.8480489    39              <NA> #> 40       j  other   0.3721646    40              <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"Encode Categorical Missing Values DM Object","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"","code":"dm_explicit_na(   data,   omit_tables = NULL,   omit_columns = NULL,   char_as_factor = TRUE,   logical_as_factor = FALSE,   na_level = \"<Missing>\" )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"data (dm) object transformed. omit_tables (character) names table omit processing. omit_columns (character) names columns omit processing. char_as_factor (logical) character columns transformed factor. logical_as_factor (logical) logical columns transformed factor. na_level (character) label encode missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"dm object explicit missing levels","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"helper function encode missing entries across groups categorical variables potentially tables dm object. label attribute columns preserved.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode Categorical Missing Values in a DM Object ‚Äî dm_explicit_na","text":"","code":"library(dm)  df1 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA) ) df2 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"num\" = 1:6 )  db <- dm(df1, df2)  dm_fact <- dm_explicit_na(db) dm_fact$df1 #>        char      fact  logi #> 1         a        f1    NA #> 2         b        f2 FALSE #> 3 <Missing> <Missing>  TRUE #> 4         a <Missing>    NA #> 5         k        f1 FALSE #> 6         x        f1    NA dm_fact$df2 #>        char      fact num #> 1         a        f1   1 #> 2         b        f2   2 #> 3 <Missing> <Missing>   3 #> 4         a <Missing>   4 #> 5         k        f1   5 #> 6         x        f1   6"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","title":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","text":"Unite Columns Table dm object.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","text":"","code":"dm_unite(adam_db, dataset, cols, sep = \".\", new = NULL)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","text":"adam_db (dm) object transformed. dataset (string) name table adam_db object. cols (character) name columns unite. sep (string) separator new column name. new (string) name new column. NULL concatenation cols separated sep used.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","text":"dm object united column.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dm_unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite Columns of a Table in a dm object. ‚Äî dm_unite","text":"","code":"x <- dm_unite(dm::dm_nycflights13(), \"airlines\", c(\"carrier\", \"name\"), new = \"FUSION\") x$airlines #> # A tibble: 15 √ó 3 #>    carrier name                        FUSION                         #>    <chr>   <chr>                       <fct>                          #>  1 9E      Endeavor Air Inc.           9E.Endeavor Air Inc.           #>  2 AA      American Airlines Inc.      AA.American Airlines Inc.      #>  3 AS      Alaska Airlines Inc.        AS.Alaska Airlines Inc.        #>  4 B6      JetBlue Airways             B6.JetBlue Airways             #>  5 DL      Delta Air Lines Inc.        DL.Delta Air Lines Inc.        #>  6 EV      ExpressJet Airlines Inc.    EV.ExpressJet Airlines Inc.    #>  7 F9      Frontier Airlines Inc.      F9.Frontier Airlines Inc.      #>  8 FL      AirTran Airways Corporation FL.AirTran Airways Corporation #>  9 HA      Hawaiian Airlines Inc.      HA.Hawaiian Airlines Inc.      #> 10 MQ      Envoy Air                   MQ.Envoy Air                   #> 11 UA      United Air Lines Inc.       UA.United Air Lines Inc.       #> 12 US      US Airways Inc.             US.US Airways Inc.             #> 13 VX      Virgin America              VX.Virgin America              #> 14 WN      Southwest Airlines Co.      WN.Southwest Airlines Co.      #> 15 YV      Mesa Airlines Inc.          YV.Mesa Airlines Inc."},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dunlin-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Dunlin Package ‚Äî dunlin-package","title":"Dunlin Package ‚Äî dunlin-package","text":"collection functions preprocess data organize format amenable use chevron.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/dunlin-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dunlin Package ‚Äî dunlin-package","text":"Maintainer: Benoit Falquet benoit.falquet@roche.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"Transforming Empty Strings White Spaces Explicit NAs Preserving Label","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"","code":"h_as_factor(x, na_level = \"<Missing>\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"x (vector) input turned factor explicit missing level. na_level (character) label encode missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"factor explicit NA label input.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"function preserves label attribute.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_as_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\", NA) attr(char1, \"label\") <- \"my_label\"  h_as_factor(char1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> <Missing> #> attr(,\"label\") #> [1] my_label #> Levels: a b <Missing>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"Reformat Variable Specific Column Table","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"","code":"h_reformat_tab(db, tab, col, dic_map)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"db (dm) object input. tab (string) name table. col (string) name variable table. dic_map (named vector) dictionary mapping values, format c(new = old) sorted according desired order factor levels. Existing values present dictionary preserved, corresponding levels placed levels remapped values. NAs empty string mapped, corresponding level last. dic_map NULL, selected column converted factor without modifications.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"dm object re coded variables factor.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"tab valid table name db object, original object returned. Similarly, col valid column selected tab object, original object returned. behavior desirable variable exists tables re coded. empty string NAs can re coded needed. label attribute column preserved.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_reformat_tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat a Variable in a Specific Column and Table ‚Äî h_reformat_tab","text":"","code":"if (FALSE) { library(dm)  df1 <- data.frame(   \"char\" = c(\"\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA) ) df2 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"num\" = 1:6 )  db <- dm(df1, df2)  dic_map <- setNames(c(\"A\", \"B\", \"Missing\", \"Empty\"), c(\"a\", \"b\", NA, \"\")) res <- h_reformat_tab(db, \"df1\", \"char\", dic_map) }"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"SAS imports missing data empty strings white spaces. helper function thin wrapper around h_ws_to_na replaces explicit missing level.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"","code":"h_ws_to_explicit_na(x, na_level = \"<Missing>\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"x (vector) empty white space transformed NAs. na_level (character) replacement missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"factor explicit NA","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\") h_ws_to_explicit_na(char1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> #> Levels: a b <Missing>  fact1 <- as.factor(char1) h_ws_to_explicit_na(fact1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> #> Levels: a b <Missing>  num1 <- c(1, 2, NA) h_ws_to_explicit_na(num1) #> [1] 1         2         <Missing> #> Levels: 1 2 <Missing>  logi1 <- c(TRUE, FALSE, NA) h_ws_to_explicit_na(logi1) #> [1] TRUE      FALSE     <Missing> #> Levels: FALSE TRUE <Missing>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"SAS imports missing data empty strings white spaces. helper function replaces empty strings white space-character levels NAs.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"","code":"h_ws_to_na(x)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"x (vector) empty white space transformed NAs.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"character factor without explicit NA. logical numeric returned character.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/h_ws_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\") h_ws_to_na(char1) #> [1] NA  NA  \"a\" \"b\" NA  NA   fact1 <- as.factor(char1) h_ws_to_na(fact1) #> [1] <NA> <NA> a    b    <NA> <NA> #> Levels: a b  num1 <- c(1:10) h_ws_to_na(num1) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"  logi1 <- c(TRUE, FALSE, NA) h_ws_to_na(logi1) #> [1] \"TRUE\"  \"FALSE\" NA"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/join_adsub_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Join adsub to adsl ‚Äî join_adsub_adsl","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"Join adsub adsl","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/join_adsub_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"","code":"join_adsub_adsl(   adam_db,   keys = c(\"USUBJID\", \"STUDYID\"),   continuous_var = \"all\",   categorical_var = \"all\",   continuous_suffix = \"\",   categorical_suffix = \"_CAT\" )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/join_adsub_adsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"adam_db (dm) object input adsl adsub table. keys (character) name columns adsl uniquely identifying row. continuous_var (character) value parameter PARAMCD column adsub table columns containing continuous values created. \"\", parameter values selected, NULL, none selected. categorical_var (character) value parameter PARAMCD column adsub table columns containing categorical values created. \"\", parameter values selected, NULL, none selected. continuous_suffix (string) suffixes add newly generated columns containing continuous values. categorical_suffix (string) suffixes add newly generated columns containing categorical values.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/join_adsub_adsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"dm object new columns adsl table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/join_adsub_adsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"","code":"adsl <- data.frame(   USUBJID = c(\"S1\", \"S2\", \"S3\", \"S4\"),   STUDYID = \"My_study\",   AGE = c(60, 44, 23, 31) )  adsub <- data.frame(   USUBJID = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S1\", \"S2\", \"S3\"),   STUDYID = \"My_study\",   PARAM = c(\"weight\", \"weight\", \"weight\", \"weight\", \"height\", \"height\", \"height\"),   PARAMCD = c(\"w\", \"w\", \"w\", \"w\", \"h\", \"h\", \"h\"),   AVAL = c(98, 75, 70, 71, 182, 155, 152),   AVALC = c(\">80\", \"<=80\", \"<=80\", \"<=80\", \">180\", \"<=180\", \"<=180\") )  db <- dm::dm(adsl, adsub)  db <- dm::dm_add_pk(db, adsl, STUDYID) db <- dm::dm_add_fk(db, adsub, STUDYID, adsl)  x <- join_adsub_adsl(adam_db = db) x <- join_adsub_adsl(adam_db = db, continuous_var = c(\"w\", \"h\"), categorical_var = \"h\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"Transforming data.frame Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"","code":"mini_pivot_wider(data, id, param_from, value_from)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"data (data.frame) pivoted. id (character) name column identifying observations. correspond row names output. param_from (character) name column containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"data.frame wide format.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"instead nesting duplicated values, function throw error parameter provided twice observation.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/mini_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_val = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  mini_pivot_wider(test_data, \"the_obs\", \"the_param\", \"the_val\") #>   id gender height other weight #> 1  A      M    165  <NA>     65 #> 2  B      F    166  <NA>     66 #> 3  C   <NA>    155  <NA>   <NA> #> 4  D   <NA>   <NA>  TRUE   <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"Transforming data.frame Complex Identifiers Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"","code":"multi_pivot_wider(data, id, param_from, value_from, drop_na = FALSE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"data (data.frame) pivoted. id (character) name columns whose combination uniquely identify observations. param_from (character) name column containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output. drop_na (logical) column containing NAs dropped.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"data.frame wide format.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"function allows identify observations basis several columns. Warning: Instead nesting duplicated values, function throw error parameter provided twice observation.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/multi_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_val = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  multi_pivot_wider(test_data, c(\"the_obs\", \"the_obs2\"), \"the_param\", \"the_val\") #>   the_obs the_obs2 gender height other weight #> 1       A       Ax      M    165  <NA>     65 #> 2       B       Bx      F    166  <NA>     66 #> 3       C       Cx   <NA>    155  <NA>   <NA> #> 4       D       Dx   <NA>   <NA>  TRUE   <NA> multi_pivot_wider(test_data, \"the_obs2\", \"the_param\", \"the_val\") #>   the_obs2 gender height other weight #> 1       Ax      M    165  <NA>     65 #> 2       Bx      F    166  <NA>     66 #> 3       Cx   <NA>    155  <NA>   <NA> #> 4       Dx   <NA>   <NA>  TRUE   <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"Transforming data.frame multiple Data Column Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"","code":"poly_pivot_wider(data, id, param_from, value_from, labels_from = NULL)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"data (data.frame) pivoted. id (character) name columns whose combination uniquely identify observations. param_from (character) name columns containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output. labels_from (character) name column congaing labels new columns. . provided, labels equal column names. several labels available column, first one selected.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"list data.frame wide format label attribute attached columns.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"function adapted cases data distributed several columns name parameter one. Typical example adsub numeric data stored AVAL categorical data AVALC.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/poly_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_label = c(     \"Weight (Kg)\", \"Height (cm)\", \"Gender\", \"Weight (Kg)\",     \"Gender\", \"Height (cm)\", \"Height (cm)\", \"Pre-condition\"   ),   the_val = c(65, 165, NA, 66, NA, 166, 155, NA),   the_val2 = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  x <- poly_pivot_wider(   test_data,   c(\"the_obs\", \"the_obs2\"),   \"the_param\",   c(\"the_val\", \"the_val2\"),   \"the_label\" ) x #> $the_val #>   the_obs the_obs2 height weight #> 1       A       Ax    165     65 #> 2       B       Bx    166     66 #> 3       C       Cx    155     NA #> 4       D       Dx     NA     NA #>  #> $the_val2 #>   the_obs the_obs2 gender height other weight #> 1       A       Ax      M    165  <NA>     65 #> 2       B       Bx      F    166  <NA>     66 #> 3       C       Cx   <NA>    155  <NA>   <NA> #> 4       D       Dx   <NA>   <NA>  TRUE   <NA> #>  Reduce(function(u, v) merge(u, v, all = TRUE), x) #>   the_obs the_obs2 height weight gender other #> 1       A       Ax    165     65      M  <NA> #> 2       B       Bx    166     66      F  <NA> #> 3       C       Cx    155     NA   <NA>  <NA> #> 4       D       Dx     NA     NA   <NA>  TRUE"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/propagate.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate Column ‚Äî propagate","title":"Propagate Column ‚Äî propagate","text":"propagatecopy columns given table dm object tables based common columns. several rows associated key, rows duplicated receiving tables. safe mode, key must unique original table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/propagate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate Column ‚Äî propagate","text":"","code":"propagate(db, from, add, by, safe = FALSE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/propagate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate Column ‚Äî propagate","text":"db (dm) object variable need propagated. (string) name table variables propagate stored. add (character) names variables propagate. (character) key binding table tables. safe (flag) key checked uniqueness table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/propagate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate Column ‚Äî propagate","text":"updates dm object.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/propagate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propagate Column ‚Äî propagate","text":"","code":"db <- dm::dm_nycflights13() res <- propagate(db, \"airlines\", \"name\", \"carrier\", safe = TRUE) #>  #> Skipping: airlines #> Skipping: airports #> Updating: flights with: name #> Skipping: planes #> Skipping: weather"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/standard_remap.html","id":null,"dir":"Reference","previous_headings":"","what":"Example of Remapping List ‚Äî standard_remap","title":"Example of Remapping List ‚Äî standard_remap","text":"Example Remapping List","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/standard_remap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example of Remapping List ‚Äî standard_remap","text":"","code":"standard_remap"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/standard_remap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example of Remapping List ‚Äî standard_remap","text":"list 2 elements 3 hierarchical levels satisfying criteria assert_reformat.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/reference/standard_remap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example of Remapping List ‚Äî standard_remap","text":"object based yaml file name stored inst/extdata.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dulin/main/news/index.html","id":"dunlin-0119010","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.1.9010","title":"dunlin 0.1.1.9010","text":"Initial package release.","code":""}]
