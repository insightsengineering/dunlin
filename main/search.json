[{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla‚Äôs code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üë∂ Getting started üìî Code Conduct üóÉ License üìú Issues üö© Pull requests üíª Coding guidelines üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Contribution Guidelines","text":"Please refer project documentation brief introduction. Please also see articles within project documentation additional information.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contribution Guidelines","text":"Code Conduct governs project. Participants contributors expected follow rules outlined therein.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"github-flow","dir":"","previous_headings":"Pull requests","what":"GitHub Flow","title":"Contribution Guidelines","text":"repository uses GitHub Flow model collaboration. submit pull request: Create branch Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes Make sure code passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR) pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, Post approval Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"branch-naming-convention","dir":"","previous_headings":"Pull requests","what":"Branch naming convention","title":"Contribution Guidelines","text":"Suppose changes related current issue current project; please name branch follows: <issue_id>_<short_description>. Please use underscore (_) delimiter word separation. example, 420_fix_ui_bug suitable branch name change resolving UI-related bug reported issue number 420 current project. change affects multiple repositories, please name branches follows: <issue_id>_<issue_repo>_<short description>. example, 69_awesomeproject_fix_spelling_error reference issue 69 reported project awesomeproject aims resolve one spelling errors multiple (likely related) repositories.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"monorepo-and-stageddependencies","dir":"","previous_headings":"Pull requests","what":"monorepo and staged.dependencies","title":"Contribution Guidelines","text":"Sometimes might need change upstream dependent package(s) able submit meaningful change. using staged.dependencies functionality simulate monorepo behavior. dependency configuration already specified project‚Äôs staged_dependencies.yaml file. need name feature branches appropriately. exception branch naming convention described . Please refer staged.dependencies package documentation details.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"coding-guidelines","dir":"","previous_headings":"","what":"Coding guidelines","title":"Contribution Guidelines","text":"repository follows unified processes standards adopted maintainers ensure software development carried consistently within teams cohesively across repositories.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"Coding guidelines","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"dependency-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency management","title":"Contribution Guidelines","text":"Lightweight right weight. repository follows tinyverse recommedations limiting dependencies minimum.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"dependency-version-management","dir":"","previous_headings":"Coding guidelines","what":"Dependency version management","title":"Contribution Guidelines","text":"code compatible (!) historical versions given dependenct package, required specify minimal version DESCRIPTION file. particular: development version requires (imports) development version another package - required put abc (>= 1.2.3.9000).","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"r--package-versions","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"R & package versions","title":"Contribution Guidelines","text":"continuously test packages newest R version along recent dependencies CRAN BioConductor. recommend working environment also set way. can find details R version packages used R CMD check GitHub Action execution log - step prints R sessionInfo(). discover bugs older R versions older set dependencies, please create relevant bug reports.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"pre-commit","dir":"","previous_headings":"Coding guidelines > Recommended development environment & tools","what":"pre-commit","title":"Contribution Guidelines","text":"highly recommend use pre-commit tool combined R hooks pre-commit execute checks committing pushing changes. Pre-commit hooks already available repository‚Äôs .pre-commit-config.yaml file.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"mentioned previously, contributions deeply valued appreciated. contribution data available part repository insights, recognize significant contribution hence add contributor package authors list, following rules enforced: Minimum 5% lines code authored* (determined git blame query) top 5 contributors terms number commits lines added lines removed* *Excluding auto-generated code, including limited roxygen comments renv.lock files. package maintainer also reserves right adjust criteria recognize contributions.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":[]},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/SECURITY.html","id":"reporting-security-issues","dir":"","previous_headings":"","what":"Reporting Security Issues","title":"Security Policy","text":"believe found security vulnerability repositories organization, please report us coordinated disclosure. Please report security vulnerabilities public GitHub issues, discussions, pull requests. Instead, please send email vulnerability.management[@]roche.com. Please include much information listed can help us better understand resolve issue: type issue (e.g., buffer overflow, SQL injection, cross-site scripting) Full paths source file(s) related manifestation issue location affected source code (tag/branch/commit direct URL) special configuration required reproduce issue Step--step instructions reproduce issue Proof--concept exploit code (possible) Impact issue, including attacker might exploit issue information help us triage report quickly.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/SECURITY.html","id":"data-security-standards-dss","dir":"","previous_headings":"","what":"Data Security Standards (DSS)","title":"Security Policy","text":"Please make sure reporting issues form bug, feature, pull request, sensitive information PII, PHI, PCI completely removed text attachments, including pictures videos.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/articles/Reformatting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reformatting","text":"Reformatting dunlin consists replacing predetermined values another particular variables selected tables data set stored. performed two steps: Reformatting Map (rule object) created specifies correspondence old new values reformatting performed dunlin::reformat() function.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/articles/Reformatting.html","id":"the-formatting-map-structure","dir":"Articles","previous_headings":"","what":"The Formatting Map Structure","title":"Reformatting","text":"Reformatting Map rule object inheriting character. names new values used, values old values used. rule replace ‚Äú‚Äù ‚Äú‚Äù, replace ‚Äúc‚Äù ‚Äúd‚Äù ‚ÄúB‚Äù.","code":"rule(A = \"a\", B = c(\"c\", \"d\")) #> Mapping of: #> A  <-  a  #> B  <-  c  #> B  <-  d  #> Convert to factor: TRUE  #> Drop unused level: FALSE  #> NA-replacing level in last position: TRUE"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/articles/Reformatting.html","id":"calling-reformat","dir":"Articles","previous_headings":"","what":"Calling reformat","title":"Reformatting","text":"reformat generic supports reformatting character factor. Reformatting types variables meaningless. reformat also preserve attributes original data, e.g.¬†data type labels unchanged. example reformatting character can can see NA values changed. Now test factor reformatting: NA values also changed. However, including reformatting NA, something different: default, level replacing NA set last one. can changed setting .na_last = FALSE. list data.frames, format argument actually nested list rule. first layer indicates table names, second layer indicates variables table. Reformatting available columns characters factors, reformatting columns another types result warning.","code":"r <- rule(A = \"a\", B = c(\"c\", \"d\")) reformat(c(\"a\", \"c\", \"d\", NA), r) #> [1] A    B    B    <NA> #> Levels: A B r <- rule(A = \"a\", B = c(\"c\", \"d\")) reformat(factor(c(\"a\", \"c\", \"d\", NA)), r) #> [1] A    B    B    <NA> #> Levels: A B r <- rule(A = \"a\", C = NA, B = c(\"c\", \"d\")) reformat(factor(c(\"a\", \"c\", \"d\", NA)), r) #> [1] A B B C #> Levels: A B C r <- rule(A = \"a\", C = NA, B = c(\"c\", \"d\")) reformat(factor(c(\"a\", \"c\", \"d\", NA)), r, .na_last = FALSE) #> [1] A B B C #> Levels: A C B"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/articles/Reformatting.html","id":"example","dir":"Articles","previous_headings":"Calling reformat","what":"Example","title":"Reformatting","text":"","code":"df1 <- data.frame(   \"char\" = c(\"\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\"), levels = c(\"f2\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA) ) df2 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")) )  db <- list(df1 = df1, df2 = df2) attr(db$df1$char, \"label\") <- \"my label\"  rule_map <- list(   df1 = list(     char = rule(\"Empty\" = \"\", \"B\" = \"b\", \"Not Available\" = NA),     fact = rule(\"F1\" = \"f1\"),     logi = rule()   ),   df2 = list(     char = rule(\"Empty\" = \"\", \"A\" = \"a\", \"Not Available\" = NA)   ) )  res <- reformat(db, rule_map, .na_last = TRUE) #> Warning: Not implemented for class: logical! Returning original object. res #> $df1 #>            char fact  logi #> 1         Empty   F1    NA #> 2             B   f2 FALSE #> 3 Not Available <NA>  TRUE #> 4             a <NA>    NA #> 5             k   F1 FALSE #> 6             x   F1    NA #>  #> $df2 #>            char fact #> 1             A   f1 #> 2             b   f2 #> 3 Not Available <NA> #> 4             A <NA> #> 5             k   f1 #> 6             x   f1"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/articles/Reformatting.html","id":"rule-attributes","dir":"Articles","previous_headings":"","what":"Rule Attributes","title":"Reformatting","text":"behavior rule can refined using special mapping values. * .to_NA convert specified character NA end process. .drop specifies whether unused levels dropped. Note behavior rule can overridden using corresponding arguments reformat.","code":"r <- rule(A = \"a\", B = c(\"c\", \"d\"), .to_NA = c(\"x\")) reformat(c(\"a\", \"c\", \"d\", NA, \"x\"), r) #> [1] A    B    B    <NA> <NA> #> Levels: A B # With drop = FALSE obj <- factor(c(\"a\", \"c\", \"d\", NA), levels = c(\"d\", \"c\", \"a\", \"Not used\")) r <- rule(A = \"a\", B = c(\"c\", \"d\")) reformat(obj, r) #> [1] A    B    B    <NA> #> Levels: A B Not used  # With drop = TRUE obj <- factor(c(\"a\", \"c\", \"d\", NA), levels = c(\"d\", \"c\", \"a\", \"Not used\")) r <- rule(A = \"a\", B = c(\"c\", \"d\"), .drop = TRUE) reformat(obj, r) #> [1] A    B    B    <NA> #> Levels: A B r <- rule(A = \"a\", B = c(\"c\", \"d\"), .to_NA = c(\"x\"), .drop = TRUE) obj <- factor(c(\"a\", \"c\", \"d\", NA, \"x\", \"y\"), levels = c(\"d\", \"c\", \"a\", \"Not used\", \"x\", \"y\"))  reformat(obj, r) #> [1] A    B    B    <NA> <NA> y    #> Levels: A B y  # Override reformat(obj, r, .to_NA = \"y\", .drop = FALSE) #> [1] A    B    B    <NA> x    <NA> #> Levels: A B Not used x"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benoit Falquet. Author, maintainer. Liming Li. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falquet B, Li L (2023). dunlin: Preprocessing Tools Clinical Trial Data. R package version 0.1.4.9000.","code":"@Manual{,   title = {dunlin: Preprocessing Tools for Clinical Trial Data},   author = {Benoit Falquet and Liming Li},   year = {2023},   note = {R package version 0.1.4.9000}, }"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/index.html","id":"dunlin-data-tools-for-pharmacy","dir":"","previous_headings":"","what":"Preprocessing Tools for Clinical Trial Data","title":"Preprocessing Tools for Clinical Trial Data","text":"dunlin provides variety data tools reformat manipulate subset tables data set.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Preprocessing Tools for Clinical Trial Data","text":"recommended create use GitHub PAT install latest version package. PAT, run following:","code":"Sys.setenv(GITHUB_PAT = \"your_access_token_here\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"insightsengineering/dunlin@*release\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Preprocessing Tools for Clinical Trial Data","text":"returns prop_db result res ","code":"library(dunlin)  df1 <- data.frame(   \"id\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"id2\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"val\" = letters[1:6] ) df2 <- data.frame(   \"id\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"id2\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"num\" = 1:6 )  db <- list(df1 = df1, df2 = df2)  prop_db <- propagate(db, \"df1\", \"val\", c(\"id\", \"id2\")) $df1     id  id2 val 1    a   f1   a 2    b   f2   b 3 <NA> <NA>   c 4    a <NA>   d 5    k   f1   e 6    x   f1   f  $df2     id  id2 num val 1    a   f1   1   a 2    b   f2   2   b 3 <NA> <NA>   3   c 4    a <NA>   4   d 5    k   f1   5   e 6    x   f1   6   f new_format <- list(   df1 = list(     id = rule(\"No ID available\" = c(\"\", NA, \"<Missing>\")),     id2 = rule(\"<Missing>\" = c(\"\", NA, \"<Missing>\"))   ) )  res <- dunlin::reformat(prop_db, new_format, .na_last = TRUE) $df1                id       id2 val 1               a        f1   a 2               b        f2   b 3 No ID available <Missing>   c 4               a <Missing>   d 5               k        f1   e 6               x        f1   f  $df2     id  id2 num val 1    a   f1   1   a 2    b   f2   2   b 3 <NA> <NA>   3   c 4    a <NA>   4   d 5    k   f1   5   e 6    x   f1   6   f"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/add_whisker.html","id":null,"dir":"Reference","previous_headings":"","what":"Add whisker values ‚Äî add_whisker","title":"Add whisker values ‚Äî add_whisker","text":"Add whisker values","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/add_whisker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add whisker values ‚Äî add_whisker","text":"","code":"add_whisker(x)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/add_whisker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add whisker values ‚Äî add_whisker","text":"x Named (character) input.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/as.list.rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Rule to List ‚Äî as.list.rule","title":"Convert Rule to List ‚Äî as.list.rule","text":"Convert Rule List","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/as.list.rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Rule to List ‚Äî as.list.rule","text":"","code":"# S3 method for rule as.list(x, ...)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/as.list.rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Rule to List ‚Äî as.list.rule","text":"x (rule) convert. ... used.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/as.list.rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Rule to List ‚Äî as.list.rule","text":"","code":"x <- rule(\"a\" = c(\"a\", \"b\"), \"X\" = \"x\") as.list(x) #> $a #> [1] \"a\" \"b\" #>  #> $X #> [1] \"x\" #>  #> $.string_as_fct #> [1] TRUE #>  #> $.na_last #> [1] TRUE #>  #> $.drop #> [1] FALSE #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","title":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","text":"Assert Nested List can used Format Argument Reformat.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","text":"","code":"assert_valid_format(object)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","text":"object (list) assert.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","text":"invisible TRUE error message criteria fulfilled.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert Nested List can be used as Format Argument in Reformat. ‚Äî assert_valid_format","text":"","code":"format <- list(   df1 = list(     var1 = rule(\"X\" = \"x\", \"N\" = c(NA, \"\"))   ),   df2 = list(     var1 = rule(),     var2 = rule(\"f11\" = \"F11\", \"NN\" = NA)   ),   df3 = list() )  assert_valid_format(format)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_list_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","title":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","text":"Assert List can Converted Nested List Compatible Format Argument Reformat.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_list_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","text":"","code":"assert_valid_list_format(object)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_list_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","text":"object (list) assert.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_list_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","text":"invisible TRUE error message criteria fulfilled.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/assert_valid_list_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert List can be Converted into a Nested List Compatible with the Format Argument of Reformat. ‚Äî assert_valid_list_format","text":"","code":"format <- list(   df1 = list(     var1 = list(\"X\" = \"x\", \"N\" = c(NA, \"\"))   ),   df2 = list(     var1 = list(),     var2 = list(\"f11\" = \"F11\", \"NN\" = NA)   ),   df3 = list() )  assert_valid_list_format(format)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the Label Attribute ‚Äî attr_label","title":"Setting the Label Attribute ‚Äî attr_label","text":"Setting Label Attribute","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the Label Attribute ‚Äî attr_label","text":"","code":"attr_label(var, label)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the Label Attribute ‚Äî attr_label","text":"var (object) whose label attribute can set. label (character) label add.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting the Label Attribute ‚Äî attr_label","text":"object label attribute.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting the Label Attribute ‚Äî attr_label","text":"","code":"x <- c(1:10) attr(x, \"label\") #> NULL  y <- attr_label(x, \"my_label\") attr(y, \"label\") #> [1] \"my_label\""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"Setting Label Attribute Data Frame Columns","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"","code":"attr_label_df(df, label)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"df (data.frame). label (character) labels add.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"data.frame label attributes.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/attr_label_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting the Label Attribute to Data Frame Columns ‚Äî attr_label_df","text":"","code":"res <- attr_label_df(mtcars, letters[1:11]) res #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 lapply(res, attr, \"label\") #> $mpg #> [1] \"a\" #>  #> $cyl #> [1] \"b\" #>  #> $disp #> [1] \"c\" #>  #> $hp #> [1] \"d\" #>  #> $drat #> [1] \"e\" #>  #> $wt #> [1] \"f\" #>  #> $qsec #> [1] \"g\" #>  #> $vs #> [1] \"h\" #>  #> $am #> [1] \"i\" #>  #> $gear #> [1] \"j\" #>  #> $carb #> [1] \"k\" #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/co_relevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"Reorder Two Columns Levels Simultaneously","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/co_relevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"","code":"co_relevels(df, primary, secondary, levels_primary)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/co_relevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"df (data.frame) two column whose factors reordered. primary (string) name column levels reordering based. secondary (string) name column whose levels reordered following levels primary column. levels_primary (character) levels desired order. Existing levels included placed afterward current order.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/co_relevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"function expect 1:1 matching elements two selected column.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/co_relevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Two Columns Levels Simultaneously ‚Äî co_relevels","text":"","code":"df <- data.frame(   SUBJID = 1:3,   PARAMCD = factor(c(\"A\", \"B\", \"C\")),   PARAM = factor(paste(\"letter\", LETTERS[1:3])) ) co_relevels(df, \"PARAMCD\", \"PARAM\", levels_primary = c(\"C\", \"A\", \"B\")) #>   SUBJID PARAMCD    PARAM #> 1      1       A letter A #> 2      2       B letter B #> 3      3       C letter C"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Cutting data by group ‚Äî cut_by_group","title":"Cutting data by group ‚Äî cut_by_group","text":"Cutting data group","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cutting data by group ‚Äî cut_by_group","text":"","code":"cut_by_group(df, col_data, col_group, group, cat_col)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cutting data by group ‚Äî cut_by_group","text":"df (dataframe) column data cut column specifying group observation. col_data (character) column containing data cut. col_group (character) column containing names groups according data split. group (nested list) providing parameter value analyzed categorical way: name parameter (character), series breakpoints (numeric) first breakpoints typically -Inf last Inf, series name describe category (character). cat_col (character) name new column cut label stored.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cutting data by group ‚Äî cut_by_group","text":"data.frame column containing categorical values.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cutting data by group ‚Äî cut_by_group","text":"Function used categorize numeric data stored long format depending group. Intervals closed right (open left).","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/cut_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cutting data by group ‚Äî cut_by_group","text":"","code":"group <- list(   list(     \"Height\",     c(-Inf, 150, 170, Inf),     c(\"=<150\", \"150-170\", \">170\")   ),   list(     \"Weight\",     c(-Inf, 65, Inf),     c(\"=<65\", \">65\")   ),   list(     \"Age\",     c(-Inf, 31, Inf),     c(\"=<31\", \">31\")   ),   list(     \"PreCondition\",     c(-Inf, 1, Inf),     c(\"=<1\", \"<1\")   ) ) data <- data.frame(   SUBJECT = rep(letters[1:10], 4),   PARAM = rep(c(\"Height\", \"Weight\", \"Age\", \"other\"), each = 10),   AVAL = c(rnorm(10, 165, 15), rnorm(10, 65, 5), runif(10, 18, 65), rnorm(10, 0, 1)),   index = 1:40 )  cut_by_group(data, \"AVAL\", \"PARAM\", group, \"my_new_categories\") #>    SUBJECT  PARAM         AVAL index my_new_categories #> 1        a Height 171.45071883     1              >170 #> 2        b Height 171.96047866     2              >170 #> 3        c Height 117.09154274     3             =<150 #> 4        d Height 158.12624264     4           150-170 #> 5        e Height 158.51181177     5           150-170 #> 6        f Height 159.83060740     6           150-170 #> 7        g Height 179.61706521     7              >170 #> 8        h Height 167.89415357     8           150-170 #> 9        i Height 152.59064986     9           150-170 #> 10       j Height 178.54689170    10              >170 #> 11       a Weight  66.32653576    11               >65 #> 12       b Weight  57.07810710    12              =<65 #> 13       c Weight  70.43114334    13               >65 #> 14       d Weight  60.75622971    14              =<65 #> 15       e Weight  59.25433617    15              =<65 #> 16       f Weight  68.31565426    16               >65 #> 17       g Weight  63.70398216    17              =<65 #> 18       h Weight  69.94454976    18               >65 #> 19       i Weight  65.79276704    19               >65 #> 20       j Weight  59.57734638    20              =<65 #> 21       a    Age  57.59257669    21               >31 #> 22       b    Age  21.62896240    22              =<31 #> 23       c    Age  44.39709599    23               >31 #> 24       d    Age  31.17271261    24               >31 #> 25       e    Age  41.64080003    25               >31 #> 26       f    Age  57.63602141    26               >31 #> 27       g    Age  27.83221573    27              =<31 #> 28       h    Age  43.10451853    28               >31 #> 29       i    Age  36.32538724    29               >31 #> 30       j    Age  51.70520859    30               >31 #> 31       a  other  -0.41002047    31              <NA> #> 32       b  other  -0.19838912    32              <NA> #> 33       c  other  -0.94817225    33              <NA> #> 34       d  other   0.03082996    34              <NA> #> 35       e  other  -0.42865803    35              <NA> #> 36       f  other   0.34262159    36              <NA> #> 37       g  other   0.04886456    37              <NA> #> 38       h  other   0.29286612    38              <NA> #> 39       i  other   1.41756361    39              <NA> #> 40       j  other   1.48452810    40              <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/dunlin-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Dunlin Package ‚Äî dunlin-package","title":"Dunlin Package ‚Äî dunlin-package","text":"collection functions preprocess data organize format amenable use chevron.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/dunlin-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dunlin Package ‚Äî dunlin-package","text":"Maintainer: Benoit Falquet benoit.falquet@roche.com Authors: Liming Li liming.li@roche.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/get_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log ‚Äî get_log","title":"Get Log ‚Äî get_log","text":"Get Log","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/get_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log ‚Äî get_log","text":"","code":"get_log(data, incl, incl.adsl)  # S3 method for data.frame get_log(data, incl = TRUE, incl.adsl = TRUE)  # S3 method for list get_log(data, incl = TRUE, incl.adsl = TRUE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/get_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Log ‚Äî get_log","text":"data (list data.frame data.frame) filtered log_filter. incl (flag) information unfiltered data.frame printed. incl.adsl (flag) indication  filtering performed adsl printed.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/get_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Log ‚Äî get_log","text":"","code":"data <- log_filter(iris, Sepal.Length >= 7, \"xx\") data <- log_filter(data, Sepal.Length < 2) data <- log_filter(data, Sepal.Length >= 2, \"yy\") get_log(data)  data <- log_filter(   list(iris1 = iris, iris2 = iris),   Sepal.Length >= 7,   \"iris1\",   character(0),   \"Sep\" ) get_log(data) #> $iris1 #> [1] \"Sep: Sepal.Length >= 7 [150 --> 13 rows.]\" #>  #> $iris2 #> [1] \"No filtering [150 rows.]\" #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"Transforming Empty Strings White Spaces Explicit NAs Preserving Label","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"","code":"h_as_factor(x, na_level = \"<Missing>\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"x (vector) input turned factor explicit missing level. na_level (character) label encode missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"factor explicit NA label input.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"function preserves label attribute.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_as_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to Explicit NAs while Preserving Label ‚Äî h_as_factor","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\", NA) attr(char1, \"label\") <- \"my_label\"  h_as_factor(char1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> <Missing> #> attr(,\"label\") #> [1] my_label #> Levels: a b <Missing>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_df_explicit.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode Categorical Missing Values in a data.frame. ‚Äî h_df_explicit","title":"Encode Categorical Missing Values in a data.frame. ‚Äî h_df_explicit","text":"Encode Categorical Missing Values data.frame.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_df_explicit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode Categorical Missing Values in a data.frame. ‚Äî h_df_explicit","text":"","code":"h_df_explicit(   df,   omit_columns = NULL,   char_as_factor = TRUE,   na_level = \"<Missing>\" )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_df_explicit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode Categorical Missing Values in a data.frame. ‚Äî h_df_explicit","text":"omit_columns (character) names columns omit processing. char_as_factor (logical) character columns converted factor. na_level (string) label encode missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_df_explicit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode Categorical Missing Values in a data.frame. ‚Äî h_df_explicit","text":"","code":"if (FALSE) { df <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA),   \"num\" = c(1:5, NA) )  h_df_explicit(df) h_df_explicit(df, omit_columns = c(\"fact\", \"x\")) }"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"SAS imports missing data empty strings white spaces. helper function thin wrapper around h_ws_to_na replaces explicit missing level.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"","code":"h_ws_to_explicit_na(x, na_level = \"<Missing>\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"x (vector) empty white space transformed NAs. na_level (character) replacement missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"factor explicit NA","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to Explicit NAs ‚Äî h_ws_to_explicit_na","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\") h_ws_to_explicit_na(char1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> #> Levels: a b <Missing>  fact1 <- as.factor(char1) h_ws_to_explicit_na(fact1) #> [1] <Missing> <Missing> a         b         <Missing> <Missing> #> Levels: a b <Missing>  num1 <- c(1, 2, NA) h_ws_to_explicit_na(num1) #> [1] 1         2         <Missing> #> Levels: 1 2 <Missing>  logi1 <- c(TRUE, FALSE, NA) h_ws_to_explicit_na(logi1) #> [1] TRUE      FALSE     <Missing> #> Levels: FALSE TRUE <Missing>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"SAS imports missing data empty strings white spaces. helper function replaces empty strings white space-character levels NAs.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"","code":"h_ws_to_na(x)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"x (vector) empty white space transformed NAs.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"character factor without explicit NA. logical numeric returned character.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/h_ws_to_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming Empty Strings and White Spaces to NAs ‚Äî h_ws_to_na","text":"","code":"char1 <- c(\" \", \"    \", \"a\", \"b\", \"\", \"\") h_ws_to_na(char1) #> [1] NA  NA  \"a\" \"b\" NA  NA   fact1 <- as.factor(char1) h_ws_to_na(fact1) #> [1] <NA> <NA> a    b    <NA> <NA> #> Levels: a b  num1 <- c(1:10) h_ws_to_na(num1) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"  logi1 <- c(TRUE, FALSE, NA) h_ws_to_na(logi1) #> [1] \"TRUE\"  \"FALSE\" NA"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/join_adsub_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Join adsub to adsl ‚Äî join_adsub_adsl","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"Join adsub adsl","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/join_adsub_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"","code":"join_adsub_adsl(   adam_db,   keys,   continuous_var,   categorical_var,   continuous_suffix,   categorical_suffix )  # S3 method for list join_adsub_adsl(   adam_db,   keys = c(\"USUBJID\", \"STUDYID\"),   continuous_var = \"all\",   categorical_var = \"all\",   continuous_suffix = \"\",   categorical_suffix = \"_CAT\" )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/join_adsub_adsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"adam_db (list data.frame) object input adsl adsub table. keys (character) name columns adsl uniquely identifying row. continuous_var (character) value parameter PARAMCD column adsub table columns containing continuous values created. \"\", parameter values selected, NULL, none selected. categorical_var (character) value parameter PARAMCD column adsub table columns containing categorical values created. \"\", parameter values selected, NULL, none selected. continuous_suffix (string) suffixes add newly generated columns containing continuous values. categorical_suffix (string) suffixes add newly generated columns containing categorical values.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/join_adsub_adsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"list data.frame new columns adsl table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/join_adsub_adsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join adsub to adsl ‚Äî join_adsub_adsl","text":"","code":"adsl <- data.frame(   USUBJID = c(\"S1\", \"S2\", \"S3\", \"S4\"),   STUDYID = \"My_study\",   AGE = c(60, 44, 23, 31) )  adsub <- data.frame(   USUBJID = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S1\", \"S2\", \"S3\"),   STUDYID = \"My_study\",   PARAM = c(\"weight\", \"weight\", \"weight\", \"weight\", \"height\", \"height\", \"height\"),   PARAMCD = c(\"w\", \"w\", \"w\", \"w\", \"h\", \"h\", \"h\"),   AVAL = c(98, 75, 70, 71, 182, 155, 152),   AVALC = c(\">80\", \"<=80\", \"<=80\", \"<=80\", \">180\", \"<=180\", \"<=180\") )  db <- list(adsl = adsl, adsub = adsub)  x <- join_adsub_adsl(adam_db = db) x <- join_adsub_adsl(adam_db = db, continuous_var = c(\"w\", \"h\"), categorical_var = \"h\")"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/list2rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert nested list into list of rule ‚Äî list2rules","title":"Convert nested list into list of rule ‚Äî list2rules","text":"Convert nested list list rule","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/list2rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert nested list into list of rule ‚Äî list2rules","text":"","code":"list2rules(obj)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/list2rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert nested list into list of rule ‚Äî list2rules","text":"obj (nested list) convert list rules.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/list2rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert nested list into list of rule ‚Äî list2rules","text":"","code":"obj <- list(   rule1 = list(\"X\" = c(\"a\", \"b\"), \"Z\" = \"c\", .to_NA = \"xxxx\"),   rule2 = list(Missing = c(NA, \"\")),   rule3 = list(Missing = c(NA, \"\"), .drop = TRUE),   rule4 = list(Absent = c(NA, \"\"), .drop = TRUE, .to_NA = \"yyyy\") ) list2rules(obj) #> $rule1 #> Mapping of: #> X  <-  a  #> X  <-  b  #> Z  <-  c  #> NA <-  xxxx  #> Convert to factor: TRUE  #> Drop unused level: FALSE  #> NA-replacing level in last position: TRUE  #>  #> $rule2 #> Mapping of: #> Missing  <-  NA  #> Missing  <-    #> Convert to factor: TRUE  #> Drop unused level: FALSE  #> NA-replacing level in last position: TRUE  #>  #> $rule3 #> Mapping of: #> Missing  <-  NA  #> Missing  <-    #> Convert to factor: TRUE  #> Drop unused level: TRUE  #> NA-replacing level in last position: TRUE  #>  #> $rule4 #> Mapping of: #> Absent  <-  NA  #> Absent  <-    #> NA <-  yyyy  #> Convert to factor: TRUE  #> Drop unused level: TRUE  #> NA-replacing level in last position: TRUE  #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/log_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Data with Log ‚Äî log_filter","title":"Filter Data with Log ‚Äî log_filter","text":"Filter Data Log","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/log_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Data with Log ‚Äî log_filter","text":"","code":"log_filter(data, condition, ...)  # S3 method for data.frame log_filter(data, condition, suffix = NULL, ...)  # S3 method for list log_filter(   data,   condition,   table,   by = c(\"USUBJID\", \"STUDYID\"),   suffix = NULL,   ... )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/log_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Data with Log ‚Äî log_filter","text":"data (data.frame) input data subset, named (list) (data.frame). condition (call) subset condition. Must evaluate logical. ... arguments passed methods. suffix (string) optional argument describing filter. table (string) table name. (character) variable names shared adsl datasets filtering.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/log_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Data with Log ‚Äî log_filter","text":"log_filter filter data/named list data according condition. variables condition must exist data (variables) parent frame(e.g., global environment). named list data, ADSL available, log_filter also try subset datasets USUBJID.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/log_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Data with Log ‚Äî log_filter","text":"","code":"data <- iris attr(data$Sepal.Length, \"label\") <- \"cm\" log_filter(data, Sepal.Length >= 7) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1           7.0         3.2          4.7         1.4 versicolor #> 2           7.1         3.0          5.9         2.1  virginica #> 3           7.6         3.0          6.6         2.1  virginica #> 4           7.3         2.9          6.3         1.8  virginica #> 5           7.2         3.6          6.1         2.5  virginica #> 6           7.7         3.8          6.7         2.2  virginica #> 7           7.7         2.6          6.9         2.3  virginica #> 8           7.7         2.8          6.7         2.0  virginica #> 9           7.2         3.2          6.0         1.8  virginica #> 10          7.2         3.0          5.8         1.6  virginica #> 11          7.4         2.8          6.1         1.9  virginica #> 12          7.9         3.8          6.4         2.0  virginica #> 13          7.7         3.0          6.1         2.3  virginica  log_filter(list(iris = iris), Sepal.Length >= 7, \"iris\", character(0)) #> $iris #>    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1           7.0         3.2          4.7         1.4 versicolor #> 2           7.1         3.0          5.9         2.1  virginica #> 3           7.6         3.0          6.6         2.1  virginica #> 4           7.3         2.9          6.3         1.8  virginica #> 5           7.2         3.6          6.1         2.5  virginica #> 6           7.7         3.8          6.7         2.2  virginica #> 7           7.7         2.6          6.9         2.3  virginica #> 8           7.7         2.8          6.7         2.0  virginica #> 9           7.2         3.2          6.0         1.8  virginica #> 10          7.2         3.0          5.8         1.6  virginica #> 11          7.4         2.8          6.1         1.9  virginica #> 12          7.9         3.8          6.4         2.0  virginica #> 13          7.7         3.0          6.1         2.3  virginica #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"Encode Categorical Missing Values list data.frame","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"","code":"ls_explicit_na(   data,   omit_tables = NULL,   omit_columns = NULL,   char_as_factor = TRUE,   na_level = \"<Missing>\" )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"data (list data.frame) transformed. omit_tables (character) names tables omit processing. omit_columns (character) names columns omit processing. char_as_factor (logical) character columns converted factor. na_level (string) label encode missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"list data.frame object explicit missing levels.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"helper function encode missing values (.e NA empty string) every character factor variable found list data.frame. label attribute columns preserved.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode Categorical Missing Values in a list of data.frame ‚Äî ls_explicit_na","text":"","code":"df1 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"char2\" = c(\"A\", \"B\", NA, \"A\", \"K\", \"X\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"logi\" = c(NA, FALSE, TRUE, NA, FALSE, NA) ) df2 <- data.frame(   \"char\" = c(\"a\", \"b\", NA, \"a\", \"k\", \"x\"),   \"fact\" = factor(c(\"f1\", \"f2\", NA, NA, \"f1\", \"f1\")),   \"num\" = c(1:5, NA) ) df3 <- data.frame(   \"char\" = c(NA, NA, \"A\") )  db <- list(df1 = df1, df2 = df2, df3 = df3)  ls_explicit_na(db) #> $df1 #>        char     char2      fact  logi #> 1         a         A        f1    NA #> 2         b         B        f2 FALSE #> 3 <Missing> <Missing> <Missing>  TRUE #> 4         a         A <Missing>    NA #> 5         k         K        f1 FALSE #> 6         x         X        f1    NA #>  #> $df2 #>        char      fact num #> 1         a        f1   1 #> 2         b        f2   2 #> 3 <Missing> <Missing>   3 #> 4         a <Missing>   4 #> 5         k        f1   5 #> 6         x        f1  NA #>  #> $df3 #>        char #> 1 <Missing> #> 2 <Missing> #> 3         A #>  ls_explicit_na(db, omit_tables = \"df3\", omit_columns = \"char2\") #> $df1 #>        char char2      fact  logi #> 1         a     A        f1    NA #> 2         b     B        f2 FALSE #> 3 <Missing>  <NA> <Missing>  TRUE #> 4         a     A <Missing>    NA #> 5         k     K        f1 FALSE #> 6         x     X        f1    NA #>  #> $df2 #>        char      fact num #> 1         a        f1   1 #> 2         b        f2   2 #> 3 <Missing> <Missing>   3 #> 4         a <Missing>   4 #> 5         k        f1   5 #> 6         x        f1  NA #>  #> $df3 #>   char #> 1 <NA> #> 2 <NA> #> 3    A #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_unite.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","title":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","text":"Unite Columns Table list data.frame.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_unite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","text":"","code":"ls_unite(adam_db, tab, cols, sep = \".\", new = NULL)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_unite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","text":"adam_db (list data.frames) transformed. tab (string) name table adam_db object. cols (character) name columns unite. sep (string) separator new column name. new (string) name new column. NULL concatenation cols separated sep used.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_unite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","text":"list data.frames object united column.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/ls_unite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite Columns of a Table in a list of data.frame. ‚Äî ls_unite","text":"","code":"db <- list(mtcars = mtcars, iris = iris)  x <- ls_unite(db, \"mtcars\", c(\"mpg\", \"hp\"), new = \"FUSION\") x$mtcars #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #>                       FUSION #> Mazda RX4             21.110 #> Mazda RX4 Wag         21.110 #> Datsun 710           22.8.93 #> Hornet 4 Drive      21.4.110 #> Hornet Sportabout   18.7.175 #> Valiant             18.1.105 #> Duster 360          14.3.245 #> Merc 240D            24.4.62 #> Merc 230             22.8.95 #> Merc 280            19.2.123 #> Merc 280C           17.8.123 #> Merc 450SE          16.4.180 #> Merc 450SL          17.3.180 #> Merc 450SLC         15.2.180 #> Cadillac Fleetwood  10.4.205 #> Lincoln Continental 10.4.215 #> Chrysler Imperial   14.7.230 #> Fiat 128             32.4.66 #> Honda Civic          30.4.52 #> Toyota Corolla       33.9.65 #> Toyota Corona        21.5.97 #> Dodge Challenger    15.5.150 #> AMC Javelin         15.2.150 #> Camaro Z28          13.3.245 #> Pontiac Firebird    19.2.175 #> Fiat X1-9            27.3.66 #> Porsche 914-2          26.91 #> Lotus Europa        30.4.113 #> Ford Pantera L      15.8.264 #> Ferrari Dino        19.7.175 #> Maserati Bora         15.335 #> Volvo 142E          21.4.109"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"Transforming data.frame Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"","code":"mini_pivot_wider(data, id, param_from, value_from)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"data (data.frame) pivoted. id (character) name column identifying observations. correspond row names output. param_from (character) name column containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"data.frame wide format.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"instead nesting duplicated values, function throw error parameter provided twice observation.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/mini_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame into Wide Format ‚Äî mini_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_val = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  mini_pivot_wider(test_data, \"the_obs\", \"the_param\", \"the_val\") #>   id gender height other weight #> 1  A      M    165  <NA>     65 #> 2  B      F    166  <NA>     66 #> 3  C   <NA>    155  <NA>   <NA> #> 4  D   <NA>   <NA>  TRUE   <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"Transforming data.frame Complex Identifiers Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"","code":"multi_pivot_wider(data, id, param_from, value_from, drop_na = FALSE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"data (data.frame) pivoted. id (character) name columns whose combination uniquely identify observations. param_from (character) name column containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output. drop_na (logical) column containing NAs dropped.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"data.frame wide format.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"function allows identify observations basis several columns. Warning: Instead nesting duplicated values, function throw error parameter provided twice observation.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/multi_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame with Complex Identifiers into Wide Format ‚Äî multi_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_val = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  multi_pivot_wider(test_data, c(\"the_obs\", \"the_obs2\"), \"the_param\", \"the_val\") #>   the_obs the_obs2 gender height other weight #> 1       A       Ax      M    165  <NA>     65 #> 2       B       Bx      F    166  <NA>     66 #> 3       C       Cx   <NA>    155  <NA>   <NA> #> 4       D       Dx   <NA>   <NA>  TRUE   <NA> multi_pivot_wider(test_data, \"the_obs2\", \"the_param\", \"the_val\") #>   the_obs2 gender height other weight #> 1       Ax      M    165  <NA>     65 #> 2       Bx      F    166  <NA>     66 #> 3       Cx   <NA>    155  <NA>   <NA> #> 4       Dx   <NA>   <NA>  TRUE   <NA>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"Transforming data.frame multiple Data Column Wide Format","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"","code":"poly_pivot_wider(data, id, param_from, value_from, labels_from = NULL)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"data (data.frame) pivoted. id (character) name columns whose combination uniquely identify observations. param_from (character) name columns containing names parameters pivoted. unique values column become column names output. value_from (character) name column containing values populate output. labels_from (character) name column congaing labels new columns. . provided, labels equal column names. several labels available column, first one selected.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"list data.frame wide format label attribute attached columns.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"function adapted cases data distributed several columns name parameter one. Typical example adsub numeric data stored AVAL categorical data AVALC.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/poly_pivot_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming data.frame with multiple Data Column into Wide Format ‚Äî poly_pivot_wider","text":"","code":"test_data <- data.frame(   the_obs = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"D\"),   the_obs2 = c(\"Ax\", \"Ax\", \"Ax\", \"Bx\", \"Bx\", \"Bx\", \"Cx\", \"Dx\"),   the_param = c(\"weight\", \"height\", \"gender\", \"weight\", \"gender\", \"height\", \"height\", \"other\"),   the_label = c(     \"Weight (Kg)\", \"Height (cm)\", \"Gender\", \"Weight (Kg)\",     \"Gender\", \"Height (cm)\", \"Height (cm)\", \"Pre-condition\"   ),   the_val = c(65, 165, NA, 66, NA, 166, 155, NA),   the_val2 = c(65, 165, \"M\", 66, \"F\", 166, 155, TRUE) )  x <- poly_pivot_wider(   test_data,   c(\"the_obs\", \"the_obs2\"),   \"the_param\",   c(\"the_val\", \"the_val2\"),   \"the_label\" ) x #> $the_val #>   the_obs the_obs2 height weight #> 1       A       Ax    165     65 #> 2       B       Bx    166     66 #> 3       C       Cx    155     NA #> 4       D       Dx     NA     NA #>  #> $the_val2 #>   the_obs the_obs2 gender height other weight #> 1       A       Ax      M    165  <NA>     65 #> 2       B       Bx      F    166  <NA>     66 #> 3       C       Cx   <NA>    155  <NA>   <NA> #> 4       D       Dx   <NA>   <NA>  TRUE   <NA> #>  Reduce(function(u, v) merge(u, v, all = TRUE), x) #>   the_obs the_obs2 height weight gender other #> 1       A       Ax    165     65      M  <NA> #> 2       B       Bx    166     66      F  <NA> #> 3       C       Cx    155     NA   <NA>  <NA> #> 4       D       Dx     NA     NA   <NA>  TRUE"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/print_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Log ‚Äî print_log","title":"Print Log ‚Äî print_log","text":"Print Log","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/print_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Log ‚Äî print_log","text":"","code":"print_log(data, incl, incl.adsl)  # S3 method for data.frame print_log(data, incl = TRUE, incl.adsl = TRUE)  # S3 method for list print_log(data, incl = TRUE, incl.adsl = TRUE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/print_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Log ‚Äî print_log","text":"data (list data.frame data.frame) filtered log_filter. incl (flag) information unfiltered data.frame printed. incl.adsl (flag) indication  filtering performed adsl printed.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/print_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Log ‚Äî print_log","text":"","code":"data <- log_filter(iris, Sepal.Length >= 7, \"Sep\") print_log(data) #> Filter Log: #>   Sep: Sepal.Length >= 7 [150 --> 13 rows.] data <- log_filter(   list(     adsl = iris,     iris2 = iris,     mtcars = mtcars,     iris3 = iris   ),   Sepal.Length >= 7,   \"adsl\",   character(0),   \"adsl filter\" ) data <- log_filter(data, Sepal.Length >= 7, \"iris2\", character(0), \"iris2 filter\") print_log(data) #> Filter Log: #>   - adsl: #>   adsl filter: Sepal.Length >= 7 [150 --> 13 rows.] #>   - iris2: #>   adsl filter: Filtered by adsl: Sepal.Length >= 7 [150 --> 13 rows.]  #>   iris2 filter: Sepal.Length >= 7 [13 --> 13 rows.] #>   - mtcars: #>   No filtering [32 rows.] #>   - iris3: #>   adsl filter: Filtered by adsl: Sepal.Length >= 7 [150 --> 13 rows.] print_log(data, incl = FALSE) #> Filter Log: #>   - adsl: #>   adsl filter: Sepal.Length >= 7 [150 --> 13 rows.] #>   - iris2: #>   adsl filter: Filtered by adsl: Sepal.Length >= 7 [150 --> 13 rows.]  #>   iris2 filter: Sepal.Length >= 7 [13 --> 13 rows.] #>   - iris3: #>   adsl filter: Filtered by adsl: Sepal.Length >= 7 [150 --> 13 rows.] print_log(data, incl.adsl = FALSE, incl = FALSE) #> Filter Log: #>   - adsl: #>   adsl filter: Sepal.Length >= 7 [150 --> 13 rows.] #>   - iris2: #>   iris2 filter: Sepal.Length >= 7 [13 --> 13 rows.]"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/propagate.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate Column ‚Äî propagate","title":"Propagate Column ‚Äî propagate","text":"propagatecopy columns given table list data.frame tables based common columns. several rows associated key, rows duplicated receiving tables. safe mode, key must unique original table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/propagate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate Column ‚Äî propagate","text":"","code":"propagate(db, from, add, by, safe = TRUE)  # S3 method for list propagate(db, from, add, by, safe = TRUE)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/propagate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate Column ‚Äî propagate","text":"db (list data.frame) object variable need propagated. (string) name table variables propagate stored. add (character) names variables propagate. (character) key binding table tables. safe (flag) key checked uniqueness table.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/propagate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate Column ‚Äî propagate","text":"updated list data.frame.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/propagate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propagate Column ‚Äî propagate","text":"","code":"df1 <- data.frame(   id1 = c(\"a\", \"a\", \"c\", \"d\", \"e\", \"f\"),   id2 = c(\"A\", \"B\", \"A\", \"A\", \"A\", \"A\"),   int = c(1, 2, 3, 4, 5, 6),   bool = c(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE) )  df2 <- data.frame(   id1 = c(\"a\", \"a\", \"d\", \"e\", \"f\", \"g\"),   id2 = c(\"A\", \"B\", \"A\", \"A\", \"A\", \"A\") )  df3 <- data.frame(   id1 = c(\"a\", \"c\", \"d\", \"e\", \"f\", \"x\"),   id2 = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"A\"),   int = c(11, 22, 33, 44, 55, 66) )  db <- list(df1 = df1, fd2 = df2, df3 = df3) propagate(db, from = \"df1\", add = c(\"int\", \"bool\"), by = c(\"id1\", \"id2\")) #>  #> Updating: fd2 with: int, bool #> Updating: df3 with: bool #> $df1 #>   id1 id2 int  bool #> 1   a   A   1  TRUE #> 2   a   B   2 FALSE #> 3   c   A   3  TRUE #> 4   d   A   4 FALSE #> 5   e   A   5  TRUE #> 6   f   A   6 FALSE #>  #> $fd2 #>   id1 id2 int  bool #> 1   a   A   1  TRUE #> 2   a   B   2 FALSE #> 3   d   A   4 FALSE #> 4   e   A   5  TRUE #> 5   f   A   6 FALSE #> 6   g   A  NA    NA #>  #> $df3 #>   id1 id2 int  bool #> 1   a   A  11  TRUE #> 2   c   A  22  TRUE #> 3   d   A  33 FALSE #> 4   e   A  44  TRUE #> 5   f   B  55    NA #> 6   x   A  66    NA #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/reformat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat Values ‚Äî reformat","title":"Reformat Values ‚Äî reformat","text":"Reformat Values","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/reformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat Values ‚Äî reformat","text":"","code":"reformat(obj, ...)  # S3 method for default reformat(obj, format, ...)  # S3 method for character reformat(obj, format, ...)  # S3 method for factor reformat(obj, format, ...)  # S3 method for list reformat(obj, format, ...)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/reformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat Values ‚Äî reformat","text":"obj object reformat. ... compatibility methods pass additional special mapping transform rules. .string_as_fct (flag) whether reformatted character object converted factor. .to_NA (character) values converted NA. factor, corresponding levels dropped. NULL, argument taken to_NAattribute rule. .drop (flag) whether drop empty levels. NULL, argument taken dropattribute rule. .na_last (flag) whether level replacing NA last. format (rule) (list) rule depending class obj.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/reformat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reformat Values ‚Äî reformat","text":"rule empty rule values subject reformatting absent object, error raised. conversion factor .string_as_fct = TRUE) still carried . conversion levels declared .to_NA NA values occurs remapping. NA values created way affected rule declaring remapping NA values. factors, level dropping last step, hence, levels converted NA .to_NA argument, removed .drop TRUE. Arguments passed via reformat override ones defined rule creation.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/reformat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat Values ‚Äî reformat","text":"","code":"# Reformatting of character. obj <- c(\"a\", \"b\", \"x\", NA) attr(obj, \"label\") <- \"my label\" format <- rule(\"A\" = \"a\", \"NN\" = NA)  reformat(obj, format) #> [1] A  b  x  NN #> attr(,\"label\") #> [1] my label #> Levels: A b x NN reformat(obj, format, .string_as_fct = FALSE, .to_NA = \"x\") #> [1] \"A\"  \"b\"  NA   \"NN\" #> attr(,\"label\") #> [1] \"my label\"   # Reformatting of factor. obj <- factor(c(\"first\", \"a\", \"aa\", \"b\", \"x\", NA), levels = c(\"first\", \"x\", \"b\", \"aa\", \"a\", \"z\")) attr(obj, \"label\") <- \"my label\" format <- rule(\"A\" = c(\"a\", \"aa\"), \"NN\" = c(NA, \"x\"), \"Not_present\" = \"z\", \"Not_a_level\" = \"P\")  reformat(obj, format) #> [1] first A     A     b     NN    NN    #> attr(,\"label\") #> [1] my label #> Levels: A Not_present Not_a_level first b NN reformat(obj, format, .na_last = FALSE, .to_NA = \"b\", .drop = FALSE) #> [1] first A     A     <NA>  NN    NN    #> attr(,\"label\") #> [1] my label #> Levels: A NN Not_present Not_a_level first   # Reformatting of list of data.frame. df1 <- data.frame(   var1 = c(\"a\", \"b\", NA),   var2 = factor(c(\"F1\", \"F2\", NA)) )  df2 <- data.frame(   var1 = c(\"x\", NA, \"y\"),   var2 = factor(c(\"F11\", NA, \"F22\")) )  db <- list(df1 = df1, df2 = df2)  format <- list(   df1 = list(     var1 = rule(\"X\" = \"x\", \"N\" = NA, .to_NA = \"b\")   ),   df2 = list(     var2 = rule(\"f11\" = \"F11\", \"NN\" = NA)   ) )  reformat(db, format) #> $df1 #>   var1 var2 #> 1    a   F1 #> 2 <NA>   F2 #> 3    N <NA> #>  #> $df2 #>   var1 var2 #> 1    x  f11 #> 2 <NA>   NN #> 3    y  F22 #>"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/remove_whisker.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove whisker values ‚Äî remove_whisker","title":"Remove whisker values ‚Äî remove_whisker","text":"Remove whisker values","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/remove_whisker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove whisker values ‚Äî remove_whisker","text":"","code":"remove_whisker(x)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/remove_whisker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove whisker values ‚Äî remove_whisker","text":"x Named (character) input.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/render_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"Render whiskers safely ‚Äî render_safe","title":"Render whiskers safely ‚Äî render_safe","text":"Render whiskers safely","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/render_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render whiskers safely ‚Äî render_safe","text":"","code":"render_safe(x)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/render_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render whiskers safely ‚Äî render_safe","text":"x (character) input rendered safely.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Create rule based on mappings ‚Äî rule","title":"Create rule based on mappings ‚Äî rule","text":"Create rule based mappings","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create rule based on mappings ‚Äî rule","text":"","code":"rule(   ...,   .lst = list(...),   .string_as_fct = TRUE,   .na_last = TRUE,   .drop = FALSE,   .to_NA = NULL )"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create rule based on mappings ‚Äî rule","text":"... Mapping pairs, argument name transformed values original values. .lst (list) mapping. .string_as_fct (flag) whether convert characters factors. .na_last (flag)  whether level replacing NA last. .drop (flag) whether drop empty levels. .to_NA (character) values converted NA.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/rule.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create rule based on mappings ‚Äî rule","text":"Conversion NA last step remapping process.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create rule based on mappings ‚Äî rule","text":"","code":"rule(\"X\" = \"x\", \"Y\" = c(\"y\", \"z\")) #> Mapping of: #> X  <-  x  #> Y  <-  y  #> Y  <-  z  #> Convert to factor: TRUE  #> Drop unused level: FALSE  #> NA-replacing level in last position: TRUE  rule(\"X\" = \"x\", \"Y\" = c(\"y\", \"z\"), .drop = TRUE, .to_NA = c(\"a\", \"b\"), .na_last = FALSE) #> Mapping of: #> X  <-  x  #> Y  <-  y  #> Y  <-  z  #> NA <-  a, b  #> Convert to factor: TRUE  #> Drop unused level: TRUE  #> NA-replacing level in last position: FALSE"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/safe_transformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe transformer ‚Äî safe_transformer","title":"Safe transformer ‚Äî safe_transformer","text":"Safe transformer","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/safe_transformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe transformer ‚Äî safe_transformer","text":"","code":"safe_transformer(text, envir)"},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/reference/safe_transformer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe transformer ‚Äî safe_transformer","text":"Obtain content global environment default. found, use environment .","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/news/index.html","id":"dunlin-0149000","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.4.9000","title":"dunlin 0.1.4.9000","text":"empty_rule removed now. rule() create normal rule object.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/news/index.html","id":"dunlin-014","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.4","title":"dunlin 0.1.4","text":"rules now attributes controlling behavior reformatting. reformat can override rule attribute corresponding arguments. Add render_safe add_whisker functions replaces placeholders enclosed curly braces replacement stored dedicated environment. read_rule function moved citril package.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/news/index.html","id":"dunlin-013","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.3","title":"dunlin 0.1.3","text":"Add log_filter function filtering additional logs. Remove use dm. Introduced ls_explicit_na replace NA values entire list data.frame. reformat re-levels factors follow order provided rule applied levels declared rule integrated result.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/news/index.html","id":"dunlin-012","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.2","title":"dunlin 0.1.2","text":"Defined Reformatting Map (rule object) specifies correspondence old new values data. Enhanced function dunlin::reformat() provides generic supports character /factor reformatting keeping attributes original data (e.g.¬†data type labels) unchanged. Improved performance package adding unit tests. Upgraded package dependencies removed deprecated functions. Updated pkgdown configuration.","code":""},{"path":"https://go.roche.com/nest-docs/releases/latest/api-reference/dunlin/main/news/index.html","id":"dunlin-011","dir":"Changelog","previous_headings":"","what":"dunlin 0.1.1","title":"dunlin 0.1.1","text":"Initial package release.","code":""}]
